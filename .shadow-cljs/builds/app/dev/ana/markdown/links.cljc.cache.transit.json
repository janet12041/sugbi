["^ ","~:output",["^ ","~:js","goog.provide('markdown.links');\nmarkdown.links.href = (function markdown$links$href(text,link,state){\nvar vec__78074 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),link);\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78074,(0),null);\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78074,(1),null);\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<a href='\"),link__$1,cljs.core.seq(\"'\"),(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title)),\">\")):cljs.core.seq(\">\")),text,cljs.core.seq(\"</a>\"),state], 0));\n});\nmarkdown.links.img = (function markdown$links$img(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___78215 = arguments.length;\nvar i__5770__auto___78216 = (0);\nwhile(true){\nif((i__5770__auto___78216 < len__5769__auto___78215)){\nargs__5775__auto__.push((arguments[i__5770__auto___78216]));\n\nvar G__78217 = (i__5770__auto___78216 + (1));\ni__5770__auto___78216 = G__78217;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((3) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((3)),(0),null)):null);\nreturn markdown.links.img.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5776__auto__);\n});\n\n(markdown.links.img.cljs$core$IFn$_invoke$arity$variadic = (function (alt,url,state,p__78083){\nvar vec__78084 = p__78083;\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78084,(0),null);\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<img src=\\\"\"),url,cljs.core.seq(\"\\\" alt=\\\"\"),alt,(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\"\\\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(title),\" />\")):cljs.core.seq(\"\\\" />\")),state], 0));\n}));\n\n(markdown.links.img.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(markdown.links.img.cljs$lang$applyTo = (function (seq78079){\nvar G__78080 = cljs.core.first(seq78079);\nvar seq78079__$1 = cljs.core.next(seq78079);\nvar G__78081 = cljs.core.first(seq78079__$1);\nvar seq78079__$2 = cljs.core.next(seq78079__$1);\nvar G__78082 = cljs.core.first(seq78079__$2);\nvar seq78079__$3 = cljs.core.next(seq78079__$2);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__78080,G__78081,G__78082,seq78079__$3);\n}));\n\nmarkdown.links.handle_img_link = (function markdown$links$handle_img_link(xs,state){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"[\",\"!\",\"[\"], null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),xs))){\nvar xs__$1 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),xs);\nvar vec__78088 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78088,(0),null);\nvar xy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78088,(1),null);\nvar vec__78091 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),xy));\nvar url_title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78091,(0),null);\nvar zy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78091,(1),null);\nvar vec__78094 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),url_title);\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78094,(0),null);\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78094,(1),null);\nvar vec__78097 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,state,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.not_empty(title)], 0));\nvar new_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78097,(0),null);\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78097,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(\"[\",new_text,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.rest(zy)], 0)),new_state], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xs,state], null);\n}\n});\nmarkdown.links.process_link_title = (function markdown$links$process_link_title(title,state){\nreturn cljs.core.first(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__78105_SHARP_,p2__78104_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(p2__78104_SHARP_,p1__78105_SHARP_);\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [title,state], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.italics,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough], null)));\n});\nmarkdown.links.make_link = (function markdown$links$make_link(img_QMARK_){\nreturn (function markdown$links$make_link_$_link(text,p__78108){\nvar map__78109 = p__78108;\nvar map__78109__$1 = cljs.core.__destructure_map(map__78109);\nvar state = map__78109__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78109__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78109__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nif(cljs.core.truth_((function (){var or__5045__auto__ = code;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar out = cljs.core.PersistentVector.EMPTY;\nvar tokens = cljs.core.seq(text);\nvar loop_state = state;\nwhile(true){\nif(cljs.core.empty_QMARK_(tokens)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(out),loop_state], null);\n} else {\nvar vec__78135 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"[\"),tokens);\nvar head = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78135,(0),null);\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78135,(1),null);\nvar vec__78140 = markdown.links.handle_img_link(xs,loop_state);\nvar xs__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78140,(0),null);\nvar loop_state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78140,(1),null);\nvar vec__78143 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78143,(0),null);\nvar ys = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78143,(1),null);\nvar vec__78146 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"(\"),ys);\nvar dud = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78146,(0),null);\nvar zs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78146,(1),null);\nvar vec__78149 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),zs);\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78149,(0),null);\nvar tail = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78149,(1),null);\nif((((cljs.core.count(tail) < (1))) || ((((cljs.core.count(link__$1) < (2))) || ((cljs.core.count(dud) > (1))))))){\nvar G__78220 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title], 0));\nvar G__78221 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(dud,link__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tail], 0));\nvar G__78222 = loop_state__$1;\nout = G__78220;\ntokens = G__78221;\nloop_state = G__78222;\ncontinue;\n} else {\nif(((cljs.core.not(img_QMARK_)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\")))){\nvar vec__78157 = markdown.links.href(cljs.core.rest(markdown.links.process_link_title(title,state)),cljs.core.rest(link__$1),loop_state__$1);\nvar link_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78157,(0),null);\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78157,(1),null);\nvar G__78223 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([link_text], 0));\nvar G__78224 = cljs.core.rest(tail);\nvar G__78225 = new_loop_state;\nout = G__78223;\ntokens = G__78224;\nloop_state = G__78225;\ncontinue;\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = img_QMARK_;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\");\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar alt = cljs.core.rest(title);\nvar vec__78160 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),cljs.core.rest(link__$1));\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78160,(0),null);\nvar title__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78160,(1),null);\nvar title__$2 = markdown.links.process_link_title(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title__$1)),loop_state__$1);\nvar vec__78163 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,loop_state__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title__$2], 0));\nvar img_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78163,(0),null);\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78163,(1),null);\nvar G__78226 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.butlast(head),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([img_text], 0));\nvar G__78227 = cljs.core.rest(tail);\nvar G__78228 = new_loop_state;\nout = G__78226;\ntokens = G__78227;\nloop_state = G__78228;\ncontinue;\n} else {\nvar G__78229 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title,dud,link__$1], 0));\nvar G__78230 = tail;\nvar G__78231 = loop_state__$1;\nout = G__78229;\ntokens = G__78230;\nloop_state = G__78231;\ncontinue;\n\n}\n}\n}\n}\nbreak;\n}\n}\n});\n});\nmarkdown.links.link = markdown.links.make_link(false);\nmarkdown.links.image = markdown.links.make_link(true);\nmarkdown.links.reference = (function markdown$links$reference(text){\nreturn cljs.core.re_find(/^\\[[a-zA-Z0-9 \\-_\\.:\\/\\\\]+\\]:/,text);\n});\nmarkdown.links.parse_reference = (function markdown$links$parse_reference(reference,start){\nreturn clojure.string.split.cljs$core$IFn$_invoke$arity$3(clojure.string.trim(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(reference,start)),/\\s+/,(2));\n});\nmarkdown.links.parse_reference_link = (function markdown$links$parse_reference_link(line,references){\nvar trimmed = clojure.string.trim(line);\nvar temp__5804__auto__ = markdown.links.reference(trimmed);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar link = temp__5804__auto__;\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(references,cljs.core.assoc,cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1))),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\n} else {\nreturn null;\n}\n});\nmarkdown.links.replace_reference_link = (function markdown$links$replace_reference_link(references,reference){\nvar vec__78172 = clojure.string.split.cljs$core$IFn$_invoke$arity$3(reference,/\\]\\s*/,(2));\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78172,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78172,(1),null);\nvar vec__78175 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,id);\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78175,(0),null);\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78175,(1),null);\nreturn [\"<a href='\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(link),\"'\",(cljs.core.truth_(alt)?[\" title='\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(alt,(1),(cljs.core.count(alt) - (1))),\"'\"].join(''):null),\">\",cljs.core.subs.cljs$core$IFn$_invoke$arity$2(title,(1)),\"</a>\"].join('');\n});\nmarkdown.links.encode_links = (function markdown$links$encode_links(links,i){\nreturn cljs.core.second(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__78180,link){\nvar vec__78182 = p__78180;\nvar i__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78182,(0),null);\nvar encoded = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78182,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(i__$1 + (1)),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(encoded,markdown.common.gen_token(i__$1),link)], null);\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i,cljs.core.PersistentArrayMap.EMPTY], null),links));\n});\nmarkdown.links.parse_links = (function markdown$links$parse_links(references,links){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__78185){\nvar vec__78186 = p__78185;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78186,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78186,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,markdown.links.replace_reference_link(references,v)], null);\n}),links));\n});\nmarkdown.links.freeze_links = (function markdown$links$freeze_links(references,text,state){\nvar links = cljs.core.re_seq(/\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.:\\/\\\\]+\\]/,text);\nvar encoded_links = markdown.links.encode_links(links,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.count,cljs.core.PersistentVector.EMPTY)(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state)));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,p__78190){\nvar vec__78191 = p__78190;\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78191,(0),null);\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78191,(1),null);\nreturn clojure.string.replace(s,link,id);\n}),text,encoded_links),cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),cljs.core.merge,markdown.links.parse_links(references,encoded_links))], null);\n});\nmarkdown.links.reference_link = (function markdown$links$reference_link(text,p__78194){\nvar map__78195 = p__78194;\nvar map__78195__$1 = cljs.core.__destructure_map(map__78195);\nvar state = map__78195__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78195__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78195__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78195__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\nif(cljs.core.truth_((function (){var or__5045__auto__ = (references == null);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nvar or__5045__auto____$1 = code;\nif(cljs.core.truth_(or__5045__auto____$1)){\nreturn or__5045__auto____$1;\n} else {\nreturn codeblock;\n}\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(markdown.links.reference(clojure.string.trim(text)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\n} else {\nreturn markdown.links.freeze_links(references,text,state);\n\n}\n}\n});\nmarkdown.links.implicit_reference_link = (function markdown$links$implicit_reference_link(text,state){\nvar replacement_text = clojure.string.replace(text,/\\[([^\\]]+)\\]\\[\\]/,\"[$1][$1]\");\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [replacement_text,state], null);\n});\nmarkdown.links.footnote = (function markdown$links$footnote(text){\nreturn cljs.core.re_find(/^\\[\\^[a-zA-Z:0-9_-]+\\]:/,text);\n});\nmarkdown.links.parse_footnote_link = (function markdown$links$parse_footnote_link(line,footnotes){\nvar trimmed = clojure.string.trim(line);\nvar temp__5804__auto__ = markdown.links.footnote(trimmed);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar link = temp__5804__auto__;\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(footnotes,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1)))], null),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\n} else {\nreturn null;\n}\n});\nmarkdown.links.replace_footnote_link = (function markdown$links$replace_footnote_link(footnotes,footnote){\nvar next_fn_id = new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636).cljs$core$IFn$_invoke$arity$1(footnotes);\nvar link = [\"#fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id)].join('');\nreturn [\"<a href='\",link,\"' id='fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"'><sup>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"</sup></a>\"].join('');\n});\nmarkdown.links.replace_all_footnote_links = (function markdown$links$replace_all_footnote_links(text,p__78197){\nwhile(true){\nvar map__78198 = p__78197;\nvar map__78198__$1 = cljs.core.__destructure_map(map__78198);\nvar state = map__78198__$1;\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78198__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\nvar matcher = /\\[\\^[a-zA-Z:0-9_-]+\\]/;\nvar match = cljs.core.re_find(matcher,text);\nif((match == null)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar next_text = clojure.string.replace_first(text,matcher,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(markdown.links.replace_footnote_link,footnotes));\nvar next_state = cljs.core.assoc_in(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null),cljs.core.inc),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null))], null),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),match], null)));\nvar G__78236 = next_text;\nvar G__78237 = next_state;\ntext = G__78236;\np__78197 = G__78237;\ncontinue;\n}\nbreak;\n}\n});\nmarkdown.links.footnote_link = (function markdown$links$footnote_link(text,p__78199){\nvar map__78200 = p__78199;\nvar map__78200__$1 = cljs.core.__destructure_map(map__78200);\nvar state = map__78200__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78200__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78200__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78200__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\nif(cljs.core.truth_((function (){var or__5045__auto__ = (new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972).cljs$core$IFn$_invoke$arity$1(footnotes) == null);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nvar or__5045__auto____$1 = code;\nif(cljs.core.truth_(or__5045__auto____$1)){\nreturn or__5045__auto____$1;\n} else {\nreturn codeblock;\n}\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(markdown.links.footnote(clojure.string.trim(text)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\n} else {\nvar vec__78201 = markdown.links.replace_all_footnote_links(text,state);\nvar text__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78201,(0),null);\nvar state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78201,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text__$1,state__$1], null);\n\n}\n}\n});\nmarkdown.links.make_image_reference = (function markdown$links$make_image_reference(src,alt,title){\nvar title_text = (cljs.core.truth_(title)?[\"\\\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(title),\"\"].join(''):\"\\\"\");\nreturn [\"<img src=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(src),\"\\\" alt=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(alt),title_text,\" />\"].join('');\n});\nmarkdown.links.image_reference_link = (function markdown$links$image_reference_link(text,p__78205){\nvar map__78207 = p__78205;\nvar map__78207__$1 = cljs.core.__destructure_map(map__78207);\nvar state = map__78207__$1;\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78207__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\nif(((cljs.core.not(new cljs.core.Keyword(null,\"reference-links?\",\"reference-links?\",-2003778981).cljs$core$IFn$_invoke$arity$1(state))) || (cljs.core.empty_QMARK_(references)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar matcher = /!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])/;\nvar matches = cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.re_seq(matcher,text));\nvar ms = matches;\nvar new_text = text;\nwhile(true){\nif(cljs.core.seq(ms)){\nvar vec__78211 = cljs.core.first(ms);\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78211,(0),null);\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78211,(1),null);\nvar ref = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__78211,(2),null);\nvar refval = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,ref);\nvar im = markdown.links.make_image_reference(cljs.core.first(refval),alt,cljs.core.second(refval));\nvar G__78239 = cljs.core.rest(ms);\nvar G__78240 = clojure.string.replace(new_text,m,im);\nms = G__78239;\nnew_text = G__78240;\ncontinue;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_text,state], null);\n}\nbreak;\n}\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/links.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.links","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^P","~$string","^P","~$markdown.common","^R","~$cljs.core","^S","~$goog","^T"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$freeze-string","^R","~$gen-token","^R","~$strong","^R","~$bold","^R","~$em","^R","~$italics","^R","~$strikethrough","^R"],"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^J",["^15",["^V",["^P","~:as","^Q"],["^R","~:refer",["^X","^Y","^Z","^[","^10","^11","^12"]]]]]],"~:flags",["^ ","^V",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^P","^R"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","markdown/links.cljc"],"~:compiled-at",1681908625990,"^K",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S","^T","^T"],"~:resource-name","markdown/links.cljc","~:warnings",[],"~:source","(ns markdown.links\n  (:require [clojure.string :as string]\n            [markdown.common\n             :refer\n             [freeze-string\n              gen-token\n              strong\n              bold\n              em\n              italics\n              strikethrough]]))\n\n(defn href [text link state]\n  (let [[link title] (split-with (partial not= \\space) link)]\n    (freeze-string\n     (seq \"<a href='\") link (seq \"'\")\n     (if (not-empty title)\n       (seq (apply str \" title=\" (string/join (rest title)) \">\"))\n       (seq \">\"))\n     text (seq \"</a>\") state)))\n\n(defn img [alt url state & [title]]\n  (freeze-string\n    (seq \"<img src=\\\"\") url (seq \"\\\" alt=\\\"\") alt\n    (if (not-empty title)\n      (seq (apply str \"\\\" title=\" (string/join title) \" />\"))\n      (seq \"\\\" />\"))\n    state))\n\n(defn handle-img-link [xs state]\n  (if (= [\\[ \\! \\[] (take 3 xs))\n    (let [xs (drop 3 xs)\n          [alt xy] (split-with (partial not= \\]) xs)\n          [url-title zy] (->> xy (drop 2) (split-with (partial not= \\))))\n          [url title] (split-with (partial not= \\space) url-title)\n          [new-text new-state] (img alt url state (not-empty title))]\n      [(concat \"[\" new-text (rest zy)) new-state])\n    [xs state]))\n\n(defn process-link-title [title state]\n  (first\n    (reduce\n      #(apply %2 %1)\n      [title state]\n      [italics em strong bold strikethrough])))\n\n(defn make-link\n  [img?]\n  (fn link [text {:keys [code codeblock] :as state}]\n    (if (or code codeblock)\n      [text state]\n      (loop [out []\n             tokens (seq text)\n             loop-state state]\n        (if (empty? tokens)\n          [(string/join out) loop-state]\n          (let [[head xs] (split-with (partial not= \\[) tokens)\n                ;; Overwriting the loop-state here\n                [xs loop-state] (handle-img-link xs loop-state)\n                [title ys] (split-with (partial not= \\]) xs)\n                [dud zs] (split-with (partial not= \\() ys)\n                [link tail] (split-with (partial not= \\)) zs)]\n\n            (cond\n              ;; Skip invalid tags and continue\n              (or (< (count tail) 1) ;; nothing after closing parens, i.e. no link/image found\n                  (< (count link) 2) ;; empty link contents, e.g. [missing link]()\n                  (> (count dud) 1)) ;; content between ] and ( means not a link/image\n              (recur (concat out head title) (concat dud link tail) loop-state)\n              \n              ;; Process Link if needed\n              (and (not img?) (not= (last head) \\!))\n              (let [[link-text new-loop-state] (href\n                                                (rest (process-link-title title state))\n                                                (rest link) loop-state)]\n                (recur (concat out head link-text) (rest tail) new-loop-state))\n              \n              ;; Process Image if needed\n              (and img? (= (last head) \\!))\n              (let [alt (rest title)\n                    [url title] (split-with (partial not= \\space) (rest link))\n                    title (process-link-title (string/join (rest title)) loop-state)\n                    ;; Now process / generate the img data\n                    [img-text new-loop-state] (img alt url loop-state title)]\n                (recur (concat out (butlast head) img-text) (rest tail) new-loop-state))\n              \n              ;; Otherwise skip link and continue\n              :else (recur (concat out head title dud link) tail loop-state))))))))\n\n(def link (make-link false))\n(def image (make-link true))\n\n(defn reference [text]\n  (re-find #\"^\\[[a-zA-Z0-9 \\-_\\.:/\\\\]+\\]:\" text))\n\n(defn parse-reference [reference start]\n  (-> reference\n      (subs start)\n      (string/trim)\n      (string/split #\"\\s+\" 2)))\n\n(defn parse-reference-link [line references]\n  (let [trimmed (string/trim line)]\n    (when-let [link (reference trimmed)]\n      (swap! references assoc (subs link 0 (dec (count link)))\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-reference-link [references reference]\n  (let [[title id] (string/split reference #\"\\]\\s*\" 2)\n        [link alt] (get references id)]\n    (str \"<a href='\" link \"'\" (when alt (str \" title='\" (subs alt 1 (dec (count alt))) \"'\")) \">\" (subs title 1) \"</a>\")))\n\n(defn encode-links [links i]\n  (second\n    (reduce\n      (fn [[i encoded] link]\n        [(inc i) (assoc encoded (gen-token i) link)])\n      [i {}]\n      links)))\n\n(defn parse-links [references links]\n  (into {} (map\n             (fn [[k v]]\n               [k (replace-reference-link references v)])\n             links)))\n\n(defn freeze-links [references text state]\n  (let [links\n        (re-seq\n          #\"\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.:/\\\\]+\\]\"\n          text)\n        encoded-links\n        (encode-links links ((fnil count []) (:frozen-strings state)))]\n    [(reduce\n       (fn [s [id link]]\n         (string/replace s link id))\n       text encoded-links)\n     (update state :frozen-strings merge (parse-links references encoded-links))]))\n\n(defn reference-link [text {:keys [code codeblock references] :as state}]\n  (cond\n    (or (nil? references) code codeblock)\n    [text state]\n\n    (reference (string/trim text))\n    [\"\" state]\n\n    :else\n    (freeze-links references text state)))\n\n(defn implicit-reference-link [text state]\n  (let [replacement-text (string/replace text #\"\\[([^\\]]+)\\]\\[\\]\" \"[$1][$1]\")]\n    [replacement-text state]))\n\n(defn footnote [text]\n  (re-find #\"^\\[\\^[a-zA-Z:0-9_-]+\\]:\" text))\n\n(defn parse-footnote-link [line footnotes]\n  (let [trimmed (string/trim line)]\n    (when-let [link (footnote trimmed)]\n      (swap! footnotes assoc-in [:unprocessed (subs link 0 (dec (count link)))]\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-footnote-link [footnotes footnote]\n  (let [next-fn-id (:next-fn-id footnotes)\n        link (str \"#fn-\" next-fn-id)]\n    (str \"<a href='\" link \"' id='fnref\" next-fn-id \"'><sup>\" next-fn-id \"</sup></a>\")))\n\n(defn replace-all-footnote-links [text {:keys [footnotes] :as state}]\n  (let [matcher #\"\\[\\^[a-zA-Z:0-9_-]+\\]\"\n        match (re-find matcher text)]\n    (if (nil? match)\n      [text state]\n      (let [next-text (string/replace-first text matcher (partial replace-footnote-link footnotes))\n            next-state (-> state\n                           (update-in [:footnotes :next-fn-id] inc)\n                           (assoc-in [:footnotes :processed (get-in state [:footnotes :next-fn-id])]\n                                     (get-in state [:footnotes :unprocessed match])))]\n        (recur next-text next-state)))))\n\n(defn footnote-link [text {:keys [code codeblock footnotes] :as state}]\n  (cond\n    (or (nil? (:unprocessed footnotes)) code codeblock)\n    [text state]\n\n    (footnote (string/trim text))\n    [\"\" state]\n\n    :else\n    (let [[text state] (replace-all-footnote-links text state)]\n      [text state])))\n\n(defn make-image-reference [src alt title]\n  (let [title-text (str (if title (str \"\\\" title=\" (string/join title) \"\") \"\\\"\"))]\n    (str \"<img src=\\\"\" src \"\\\" alt=\\\"\" alt title-text \" />\")))\n\n(defn image-reference-link [text {:keys [references] :as state}]\n  (if (or (not (:reference-links? state)) (empty? references))\n    [text state]\n    (let [matcher #\"!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])\"\n          matches (distinct (re-seq matcher text))]\n      (loop [ms matches\n             new-text text]\n        (if (seq ms)\n          (let [[m alt ref] (first ms)\n                refval (get references ref)\n                im (make-image-reference (first refval) alt (second refval))]\n            (recur (rest ms) (string/replace new-text m im)))\n          [new-text state])))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.links/href","text","link","state","vec__78074","cljs.core.nth","title","cljs.core/split-with","cljs.core.partial","cljs.core/not=","markdown.common.freeze_string","cljs.core/seq","cljs.core/not-empty","cljs.core.apply","cljs.core/str","clojure.string.join","cljs.core/rest","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","markdown.links/img","p__78083","vec__78084","seq78079","G__78080","cljs.core/first","cljs.core/next","G__78081","G__78082","self__5754__auto__","alt","url","markdown.links/handle-img-link","xs","cljs.core._EQ_","cljs.core.take","vec__78088","vec__78091","vec__78094","vec__78097","cljs.core.drop","xy","url-title","zy","new-text","new-state","markdown.links.img","cljs.core.concat","markdown.links/process-link-title","p1__78105#","p2__78104#","cljs.core.reduce","markdown.common/italics","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.links/make-link","img?","p__78108","map__78109","cljs.core/--destructure-map","cljs.core.get","code","codeblock","or__5045__auto__","out","tokens","loop-state","cljs.core/empty?","vec__78135","vec__78140","vec__78143","vec__78146","vec__78149","head","ys","dud","zs","tail","cljs.core/count","cljs.core/not","cljs.core.not_EQ_","cljs.core/last","vec__78157","link-text","new-loop-state","and__5043__auto__","vec__78160","vec__78163","img-text","cljs.core/butlast","markdown.links/link","markdown.links/image","markdown.links/reference","cljs.core/re-find","markdown.links/parse-reference","reference","start","cljs.core.subs","clojure.string/trim","clojure.string.split","markdown.links/parse-reference-link","line","references","trimmed","temp__5804__auto__","cljs.core.swap_BANG_","cljs.core/assoc","markdown.links/replace-reference-link","vec__78172","vec__78175","id","markdown.links/encode-links","links","i","cljs.core/second","p__78180","vec__78182","encoded","cljs.core.assoc","markdown.common/gen-token","markdown.links/parse-links","cljs.core.into","cljs.core.map","p__78185","vec__78186","k","v","markdown.links/freeze-links","cljs.core/re-seq","encoded-links","cljs.core.fnil","p__78190","vec__78191","s","clojure.string/replace","cljs.core.update","cljs.core/merge","p__78194","map__78195","markdown.links/reference-link","markdown.links/implicit-reference-link","replacement-text","markdown.links/footnote","markdown.links/parse-footnote-link","footnotes","cljs.core/assoc-in","markdown.links/replace-footnote-link","footnote","next-fn-id","p__78197","map__78198","markdown.links/replace-all-footnote-links","matcher","match","next-text","clojure.string/replace-first","next-state","cljs.core.update_in","cljs.core/inc","cljs.core.get_in","p__78199","map__78200","markdown.links/footnote-link","vec__78201","markdown.links/make-image-reference","src","title-text","p__78205","map__78207","markdown.links/image-reference-link","matches","cljs.core.distinct","ms","vec__78211","m","ref","refval","im"]],"~:used-vars",["^H",["~$cljs.core/--destructure-map","~$clojure.string/replace-first","~$clojure.string/join","~$cljs.core/rest","~$markdown.links/link","~$markdown.links/footnote-link","~$cljs.core/str","~$cljs.core/re-seq","~$markdown.common/freeze-string","~$markdown.links/href","~$clojure.string/split","~$cljs.core/=","~$markdown.links/image","~$markdown.links/process-link-title","~$cljs.core/partial","~$cljs.core/IndexedSeq","~$markdown.common/bold","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$markdown.links/replace-reference-link","~$cljs.core/take","~$cljs.core/last","~$cljs.core/not=","~$cljs.core/distinct","~$markdown.links/handle-img-link","~$cljs.core/concat","~$markdown.links/replace-all-footnote-links","~$markdown.common/em","~$markdown.links/footnote","~$cljs.core/empty?","~$cljs.core/fnil","~$markdown.common/strikethrough","~$cljs.core/into","~$markdown.links/parse-reference-link","~$cljs.core/update","~$cljs.core/map","~$markdown.links/img","~$markdown.links/parse-links","~$cljs.core/get-in","~$cljs.core/swap!","~$cljs.core/get","~$markdown.links/freeze-links","~$markdown.links/parse-reference","~$cljs.core/not-empty","~$markdown.common/gen-token","~$markdown.links/image-reference-link","~$cljs.core/re-find","~$markdown.common/strong","~$cljs.core/nth","~$cljs.core/second","~$clojure.string/replace","~$markdown.common/italics","~$markdown.links/encode-links","~$cljs.core/split-with","~$cljs.core/next","~$markdown.links/parse-footnote-link","~$markdown.links/replace-footnote-link","~$cljs.core/not","~$cljs.core/assoc","~$markdown.links/implicit-reference-link","~$cljs.core/assoc-in","~$markdown.links/make-image-reference","~$clojure.string/trim","~$cljs.core/first","~$markdown.links/make-link","~$cljs.core/butlast","~$cljs.core/subs","~$cljs.core/merge","~$cljs.core/update-in","~$markdown.links/reference-link","~$markdown.links/reference","~$cljs.core/inc","~$cljs.core/drop"]]],"~:cache-keys",["~#cmap",[["^1=","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^1=","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1=","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3F"]]],["^1=","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G"]]],["^1=","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","markdown/common.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^S","^P"]]],["^1=","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G"]]],"~:SHADOW-TIMESTAMP",[1681908370000,1681908370000,1681908362000],["^1=","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G","~$goog.reflect"]]],["^1=","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G","~$goog.fs.blob","^3H","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3J","^3K","^3L","^3M"]]],["^1=","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3L","~$goog.html.SafeUrl","^3M","^3G","^3F"]]],["^1=","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3Q","~$goog.html.SafeStyle","^3S","^3I","~$goog.html.uncheckedconversions","^3L","^3F"]]],["^1=","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3L","^3J","^3K","^3Q","^3W","~$goog.html.SafeStyleSheet","^3S","~$goog.dom.TagName","^3I","^3M","^3G","~$goog.labs.userAgent.browser","^3C","^3D","^3F","~$goog.dom.tags","^3R"]]],["^1=","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3D"]]],["^1=","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3C","^3G","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",[]]],["^1=","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3C","^3D"]]],["^1=","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^S","^44","~$goog.string.StringBuffer"]]],["^1=","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","~$goog.dom.safe","^3X","^3L","^3F"]]],["^1=","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","~$goog.labs.userAgent","^3F"]]],["^1=","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G","^3V","^3Q","^3W","^3Y","^3S","^3I","^3L","^3F","^3J"]]],["^1=","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T"]]],["^1=","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","~$goog.math.Long","~$goog.math.Integer","^44","^3D","^3C","~$goog.Uri","^49"]]],["^1=","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3L","^3M","^3R","^3G"]]],["^1=","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3L","^3W","^3M","^3D","^3G","^3F"]]],["^1=","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3O"]]],["^1=","markdown/links.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^S","^P","^R"]]],["^1=","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G","^44"]]],["^1=","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3>",["^ ","^3?",null,"^3@",["^H",[]],"^3A",["^T","^3G","^3M"]]]]],"~:clj-info",["^ ","jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1681908369000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1681908362000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/links.cljc","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S","^T","^T"],"^U",["^H",["^V"]],"^W",["^ ","^X","^R","^Y","^R","^Z","^R","^[","^R","^10","^R","^11","^R","^12","^R"],"~:defs",["^ ","~$replace-all-footnote-links",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/links.cljc","^7",169,"^8",7,"^9",169,"^:",33,"~:arglists",["^15",["~$quote",["^15",[["~$text",["^ ","~:keys",["~$footnotes"],"^17","~$state"]]]]]]],"^I","^29","^6","markdown/links.cljc","^:",33,"~:method-params",["^15",[["^58","~$p__78197"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^8",1,"~:variadic?",false,"^7",169,"~:ret-tag","~$cljs.core/IVector","^9",169,"~:max-fixed-arity",2,"~:fn-var",true,"^56",["^15",["^57",["^15",[["^58",["^ ","^59",["^5:"],"^17","^5;"]]]]]]],"~$make-image-reference",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",193,"^8",7,"^9",193,"^:",27,"^56",["^15",["^57",["^15",[["~$src","~$alt","~$title"]]]]]],"^I","^30","^6","markdown/links.cljc","^:",27,"^5<",["^15",[["^5F","^5G","^5H"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",193,"^5A","^Q","^9",193,"^5C",3,"^5D",true,"^56",["^15",["^57",["^15",[["^5F","^5G","^5H"]]]]]],"~$href",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",13,"^8",7,"^9",13,"^:",11,"^56",["^15",["^57",["^15",[["^58","~$link","^5;"]]]]]],"^I","^1R","^6","markdown/links.cljc","^:",11,"^5<",["^15",[["^58","^5J","^5;"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",13,"^5A","^5B","^9",13,"^5C",3,"^5D",true,"^56",["^15",["^57",["^15",[["^58","^5J","^5;"]]]]]],"~$img",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",22,"^8",7,"^9",22,"^:",10,"^56",["^15",["^57",["^15",[["^5G","~$url","^5;","~$&",["^5H"]]]]]],"~:top-fn",["^ ","^5@",true,"~:fixed-arity",3,"^5C",3,"^5<",[["^15",["^5G","^5L","^5;",["^5H"]]]],"^56",["^15",[["^5G","^5L","^5;","~$&",["^5H"]]]],"^5?",["^15",[null]]]],"^I","^2C","^6","markdown/links.cljc","^:",10,"^5M",["^ ","^5@",true,"^5N",3,"^5C",3,"^5<",[["^15",["^5G","^5L","^5;",["^5H"]]]],"^56",["^15",[["^5G","^5L","^5;","~$&",["^5H"]]]],"^5?",["^15",[null]]],"^5<",[["^15",["^5G","^5L","^5;",["^5H"]]]],"^5>",null,"^5N",3,"^5?",["^15",[null]],"^8",1,"^5@",true,"~:methods",[["^ ","^5N",3,"^5@",true,"~:tag","^5B"]],"^7",22,"^5A","~$any","^9",22,"^5C",3,"^5D",true,"^56",["^15",[["^5G","^5L","^5;","~$&",["^5H"]]]]],"~$parse-footnote-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",158,"^8",7,"^9",158,"^:",26,"^56",["^15",["^57",["^15",[["~$line","^5:"]]]]]],"^I","^2V","^6","markdown/links.cljc","^:",26,"^5<",["^15",[["^5S","^5:"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",158,"^5A",["^H",[null,"^5Q","~$clj-nil"]],"^9",158,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^5S","^5:"]]]]]],"~$implicit-reference-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",151,"^8",7,"^9",151,"^:",30,"^56",["^15",["^57",["^15",[["^58","^5;"]]]]]],"^I","^2Z","^6","markdown/links.cljc","^:",30,"^5<",["^15",[["^58","^5;"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",151,"^5A","^5B","^9",151,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^58","^5;"]]]]]],"~$parse-links",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",121,"^8",7,"^9",121,"^:",18,"^56",["^15",["^57",["^15",[["~$references","~$links"]]]]]],"^I","^2D","^6","markdown/links.cljc","^:",18,"^5<",["^15",[["^5W","^5X"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",121,"^5A",["^H",[null,"~$clj","^5Q"]],"^9",121,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^5W","^5X"]]]]]],"~$footnote-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",181,"^8",7,"^9",181,"^:",20,"^56",["^15",["^57",["^15",[["^58",["^ ","^59",["~$code","~$codeblock","^5:"],"^17","^5;"]]]]]]],"^I","^1N","^6","markdown/links.cljc","^:",20,"^5<",["^15",[["^58","~$p__78199"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",181,"^5A","^5B","^9",181,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^58",["^ ","^59",["^5[","^60","^5:"],"^17","^5;"]]]]]]],"~$reference-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",140,"^8",7,"^9",140,"^:",21,"^56",["^15",["^57",["^15",[["^58",["^ ","^59",["^5[","^60","^5W"],"^17","^5;"]]]]]]],"^I","^38","^6","markdown/links.cljc","^:",21,"^5<",["^15",[["^58","~$p__78194"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",140,"^5A","^5B","^9",140,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^58",["^ ","^59",["^5[","^60","^5W"],"^17","^5;"]]]]]]],"~$image-reference-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",197,"^8",7,"^9",197,"^:",27,"^56",["^15",["^57",["^15",[["^58",["^ ","^59",["^5W"],"^17","^5;"]]]]]]],"^I","^2L","^6","markdown/links.cljc","^:",27,"^5<",["^15",[["^58","~$p__78205"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",197,"^5A","^5B","^9",197,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^58",["^ ","^59",["^5W"],"^17","^5;"]]]]]]],"~$make-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",47,"^8",7,"^9",47,"^:",16,"^56",["^15",["^57",["^15",[["~$img?"]]]]]],"^I","^33","^6","markdown/links.cljc","^:",16,"^5<",["^15",[["^67"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",47,"^5A","~$function","^9",47,"^5C",1,"^5D",true,"^56",["^15",["^57",["^15",[["^67"]]]]]],"~$replace-footnote-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",164,"^8",7,"^9",164,"^:",28,"^56",["^15",["^57",["^15",[["^5:","~$footnote"]]]]]],"^I","^2W","^6","markdown/links.cljc","^:",28,"^5<",["^15",[["^5:","^6:"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",164,"^5A","^Q","^9",164,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^5:","^6:"]]]]]],"~$replace-reference-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",108,"^8",7,"^9",108,"^:",29,"^56",["^15",["^57",["^15",[["^5W","~$reference"]]]]]],"^I","^22","^6","markdown/links.cljc","^:",29,"^5<",["^15",[["^5W","^6<"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",108,"^5A","^Q","^9",108,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^5W","^6<"]]]]]],"~$handle-img-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",30,"^8",7,"^9",30,"^:",22,"^56",["^15",["^57",["^15",[["~$xs","^5;"]]]]]],"^I","^27","^6","markdown/links.cljc","^:",22,"^5<",["^15",[["^6>","^5;"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",30,"^5A","^5B","^9",30,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^6>","^5;"]]]]]],"~$parse-reference",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",96,"^8",7,"^9",96,"^:",22,"^56",["^15",["^57",["^15",[["^6<","~$start"]]]]]],"^I","^2I","^6","markdown/links.cljc","^:",22,"^5<",["^15",[["^6<","^6@"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",96,"^5A",["^H",[null,"^5Q"]],"^9",96,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^6<","^6@"]]]]]],"^6:",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",155,"^8",7,"^9",155,"^:",15,"^56",["^15",["^57",["^15",[["^58"]]]]]],"^I","^2;","^6","markdown/links.cljc","^:",15,"^5<",["^15",[["^58"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",155,"^5A",["^H",["^5Y","^5B","^5Q","~$cljs.core/MetaFn","^5T"]],"^9",155,"^5C",1,"^5D",true,"^56",["^15",["^57",["^15",[["^58"]]]]]],"~$parse-reference-link",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",102,"^8",7,"^9",102,"^:",27,"^56",["^15",["^57",["^15",[["^5S","^5W"]]]]]],"^I","^2@","^6","markdown/links.cljc","^:",27,"^5<",["^15",[["^5S","^5W"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",102,"^5A",["^H",[null,"^5Q","^5T"]],"^9",102,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^5S","^5W"]]]]]],"^6<",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",93,"^8",7,"^9",93,"^:",16,"^56",["^15",["^57",["^15",[["^58"]]]]]],"^I","^39","^6","markdown/links.cljc","^:",16,"^5<",["^15",[["^58"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",93,"^5A",["^H",["^5Y","^5B","^5Q","^6A","^5T"]],"^9",93,"^5C",1,"^5D",true,"^56",["^15",["^57",["^15",[["^58"]]]]]],"^5J",["^ ","^I","^1M","^6","markdown/links.cljc","^7",90,"^8",1,"^9",90,"^:",10,"^5",["^ ","^6","markdown/links.cljc","^7",90,"^8",6,"^9",90,"^:",10],"^5P","^68"],"~$freeze-links",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",127,"^8",7,"^9",127,"^:",19,"^56",["^15",["^57",["^15",[["^5W","^58","^5;"]]]]]],"^I","^2H","^6","markdown/links.cljc","^:",19,"^5<",["^15",[["^5W","^58","^5;"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",127,"^5A","^5B","^9",127,"^5C",3,"^5D",true,"^56",["^15",["^57",["^15",[["^5W","^58","^5;"]]]]]],"~$encode-links",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",113,"^8",7,"^9",113,"^:",19,"^56",["^15",["^57",["^15",[["^5X","~$i"]]]]]],"^I","^2S","^6","markdown/links.cljc","^:",19,"^5<",["^15",[["^5X","~$i"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",113,"^5A",["^H",["^5Q","^5T"]],"^9",113,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^5X","~$i"]]]]]],"~$image",["^ ","^I","^1U","^6","markdown/links.cljc","^7",91,"^8",1,"^9",91,"^:",11,"^5",["^ ","^6","markdown/links.cljc","^7",91,"^8",6,"^9",91,"^:",11],"^5P","^68"],"~$process-link-title",["^ ","^55",null,"^5",["^ ","^6","markdown/links.cljc","^7",40,"^8",7,"^9",40,"^:",25,"^56",["^15",["^57",["^15",[["^5H","^5;"]]]]]],"^I","^1V","^6","markdown/links.cljc","^:",25,"^5<",["^15",[["^5H","^5;"]]],"^5>",null,"^5?",["^15",[null,null]],"^8",1,"^5@",false,"^7",40,"^5A",["^H",["^5Q","^5T"]],"^9",40,"^5C",2,"^5D",true,"^56",["^15",["^57",["^15",[["^5H","^5;"]]]]]]],"^13",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^H",["~:codeblock","~:footnotes","~:unprocessed","~:else","~:frozen-strings","~:references","~:next-fn-id","~:code","~:processed","~:reference-links?"]],"~:order",["^6O","^6H","^6K","^6L","^6M","^6J","^6N","^6I","^6P","^6Q"]],"^19",["^ ","^V",["^H",[]]],"^1:",["^ "],"^1;",["^T","^S","^P","^R"]],"^M","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^3=",[["^6U","~:static-fns"],true,["^6U","~:shadow-tweaks"],null,["^6U","~:source-map-inline"],null,["^6U","~:elide-asserts"],false,["^6U","~:optimize-constants"],null,["^6U","^1@"],null,["^6U","~:external-config"],null,["^6U","~:tooling-config"],null,["^6U","~:emit-constants"],null,["^6U","~:load-tests"],null,["^6U","~:form-size-threshold"],null,["^6U","~:global-goog-object&array"],null,["^6U","~:data-readers"],null,["^6U","~:infer-externs"],"~:auto",["^6U","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6U","~:fn-invoke-direct"],null,["^6U","~:source-map"],"/dev/null"]]]