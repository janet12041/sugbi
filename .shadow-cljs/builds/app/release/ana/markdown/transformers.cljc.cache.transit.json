["^ ","~:output",["^ ","~:js","goog.provide('markdown.transformers');\nmarkdown.transformers.heading_QMARK_ = (function markdown$transformers$heading_QMARK_(text,type){\nif(cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),text))){\nreturn null;\n} else {\nvar trimmed = (function (){var G__48625 = text;\nif((G__48625 == null)){\nreturn null;\n} else {\nreturn clojure.string.trim(G__48625);\n}\n})();\nvar and__5043__auto__ = cljs.core.not_empty(trimmed);\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.every_QMARK_(cljs.core.PersistentHashSet.createAsIfByAssoc([type]),trimmed);\n} else {\nreturn and__5043__auto__;\n}\n}\n});\nmarkdown.transformers.h1_QMARK_ = (function markdown$transformers$h1_QMARK_(text){\nreturn markdown.transformers.heading_QMARK_(text,\"=\");\n});\nmarkdown.transformers.h2_QMARK_ = (function markdown$transformers$h2_QMARK_(text){\nreturn markdown.transformers.heading_QMARK_(text,\"-\");\n});\nmarkdown.transformers.empty_line = (function markdown$transformers$empty_line(text,p__48626){\nvar map__48627 = p__48626;\nvar map__48627__$1 = cljs.core.__destructure_map(map__48627);\nvar state = map__48627__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48627__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48627__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nif(cljs.core.truth_((function (){var or__5045__auto__ = code;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__5045__auto__ = markdown.transformers.h1_QMARK_(text);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn markdown.transformers.h2_QMARK_(text);\n}\n})())?\"\":text),((clojure.string.blank_QMARK_(text))?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873)], 0)):state)], null);\n}\n});\nmarkdown.transformers.superscript = (function markdown$transformers$superscript(text,state){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.contains_QMARK_,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"^\",null], null), null)),text);\nvar buf = cljs.core.PersistentVector.EMPTY;\nvar remaining = tokens;\nwhile(true){\nif(cljs.core.empty_QMARK_(remaining)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf),state], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"^\"], null))){\nvar G__48694 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(\"<sup>\"),cljs.core.second(remaining),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"</sup>\")], 0)));\nvar G__48695 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),remaining);\nbuf = G__48694;\nremaining = G__48695;\ncontinue;\n} else {\nvar G__48698 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(remaining));\nvar G__48699 = cljs.core.rest(remaining);\nbuf = G__48698;\nremaining = G__48699;\ncontinue;\n\n}\n}\nbreak;\n}\n}\n});\nmarkdown.transformers.heading = (function markdown$transformers$heading(text,p__48628){\nvar map__48629 = p__48628;\nvar map__48629__$1 = cljs.core.__destructure_map(map__48629);\nvar state = map__48629__$1;\nvar buf = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48629__$1,new cljs.core.Keyword(null,\"buf\",\"buf\",-213913340));\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48629__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48629__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48629__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar heading_anchors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48629__$1,new cljs.core.Keyword(null,\"heading-anchors\",\"heading-anchors\",1713527866));\nif(cljs.core.truth_((function (){var or__5045__auto__ = codeblock;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn code;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(markdown.transformers.h1_QMARK_((function (){var or__5045__auto__ = buf;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn next_line;\n}\n})()))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h1>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h1>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\n} else {\nif(cljs.core.truth_(markdown.transformers.h2_QMARK_((function (){var or__5045__auto__ = buf;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn next_line;\n}\n})()))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h2>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h2>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\n} else {\nvar temp__5802__auto__ = markdown.common.make_heading(text,heading_anchors);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar heading = temp__5802__auto__;\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [heading,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818),true)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n\n}\n}\n}\n});\nmarkdown.transformers.br = (function markdown$transformers$br(text,p__48630){\nvar map__48631 = p__48630;\nvar map__48631__$1 = cljs.core.__destructure_map(map__48631);\nvar state = map__48631__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48631__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48631__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),text))) && (cljs.core.not((function (){var or__5045__auto__ = code;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn lists;\n}\n})()))))?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((2),text))),\"<br />\"].join(''):text),state], null);\n});\nmarkdown.transformers.autourl_transformer = (function markdown$transformers$autourl_transformer(text,p__48633){\nvar map__48634 = p__48633;\nvar map__48634__$1 = cljs.core.__destructure_map(map__48634);\nvar state = map__48634__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48634__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar frozen_strings = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48634__$1,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560));\nif(cljs.core.truth_(code)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar currently_frozen = cljs.core.volatile_BANG_(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),frozen_strings], null));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.replace(text,/<https?:\\/\\/[-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\\/%=~_()|]>/,(function (p1__48632_SHARP_){\nvar vec__48635 = markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__48632_SHARP_,(1),(cljs.core.count(p1__48632_SHARP_) - (1))),cljs.core.deref(currently_frozen)], 0));\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48635,(0),null);\nvar frozen_strings__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48635,(1),null);\ncljs.core.vreset_BANG_(currently_frozen,frozen_strings__$1);\n\nreturn [\"<a href=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"</a>\"].join('');\n})),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([state,cljs.core.deref(currently_frozen)], 0))], null);\n}\n});\nmarkdown.transformers.autoemail_transformer = (function markdown$transformers$autoemail_transformer(text,state){\nvar left_pad = (function (s){\nvar G__48639 = s;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(s))){\nreturn [\"0\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__48639)].join('');\n} else {\nreturn G__48639;\n}\n});\nvar encoder = (cljs.core.truth_(new cljs.core.Keyword(null,\"clojurescript\",\"clojurescript\",-299769403).cljs$core$IFn$_invoke$arity$1(state))?(function (c){\nreturn [\"&#x\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(left_pad(c.charCodeAt((0)).toString((16)))),\";\"].join('');\n}):(function (c){\nreturn markdown.transformers._STAR_formatter_STAR_.call(null,\"&#x%02x;\",(c | (0)));\n}));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\n}\n})())?text:clojure.string.replace(text,/<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>/,(function (p1__48638_SHARP_){\nvar encoded = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(encoder,cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__48638_SHARP_,(1),(cljs.core.count(p1__48638_SHARP_) - (1)))));\nreturn [\"<a href=\\\"mailto:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"</a>\"].join('');\n}))),state], null);\n});\nmarkdown.transformers.set_line_state = (function markdown$transformers$set_line_state(text,p__48640){\nvar map__48641 = p__48640;\nvar map__48641__$1 = cljs.core.__destructure_map(map__48641);\nvar state = map__48641__$1;\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48641__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc_in(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284),new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)], null),inline_heading)], null);\n});\nmarkdown.transformers.clear_line_state = (function markdown$transformers$clear_line_state(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284))], null);\n});\nmarkdown.transformers.paragraph_text = (function markdown$transformers$paragraph_text(last_line_empty_QMARK_,text){\nif(cljs.core.truth_((function (){var and__5043__auto__ = cljs.core.not(last_line_empty_QMARK_);\nif(and__5043__auto__){\nreturn cljs.core.not_empty(text);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn [\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join('');\n} else {\nreturn text;\n}\n});\nmarkdown.transformers.open_paragraph = (function markdown$transformers$open_paragraph(text,p__48642){\nvar map__48643 = p__48642;\nvar map__48643__$1 = cljs.core.__destructure_map(map__48643);\nvar state = map__48643__$1;\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\nvar blockquote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190));\nvar heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873));\nvar hr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067));\nvar temp = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\nvar last_line_empty_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48643__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nif(cljs.core.truth_((function (){var and__5043__auto__ = paragraph;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn lists;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\n} else {\nif(cljs.core.truth_((function (){var or__5045__auto__ = heading;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar or__5045__auto____$1 = inline_heading;\nif(cljs.core.truth_(or__5045__auto____$1)){\nreturn or__5045__auto____$1;\n} else {\nvar or__5045__auto____$2 = hr;\nif(cljs.core.truth_(or__5045__auto____$2)){\nreturn or__5045__auto____$2;\n} else {\nvar or__5045__auto____$3 = code;\nif(cljs.core.truth_(or__5045__auto____$3)){\nreturn or__5045__auto____$3;\n} else {\nvar or__5045__auto____$4 = lists;\nif(cljs.core.truth_(or__5045__auto____$4)){\nreturn or__5045__auto____$4;\n} else {\nreturn blockquote;\n}\n}\n}\n}\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(paragraph)){\nif(cljs.core.truth_((function (){var or__5045__auto__ = eof;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.empty_QMARK_(clojure.string.trim(text));\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.transformers.paragraph_text(last_line_empty_QMARK_,text)),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.paragraph_text(last_line_empty_QMARK_,text),state], null);\n}\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = cljs.core.not(eof);\nif(and__5043__auto__){\nvar and__5043__auto____$1 = (!(clojure.string.blank_QMARK_(text)));\nif(and__5043__auto____$1){\nvar or__5045__auto__ = new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818).cljs$core$IFn$_invoke$arity$1(temp);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn last_line_empty_QMARK_;\n}\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),false], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n\n}\n}\n}\n}\n});\nmarkdown.transformers.close_paragraph = (function markdown$transformers$close_paragraph(text,p__48644){\nvar map__48645 = p__48644;\nvar map__48645__$1 = cljs.core.__destructure_map(map__48645);\nvar state = map__48645__$1;\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48645__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48645__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\nif(cljs.core.truth_((function (){var and__5043__auto__ = paragraph;\nif(cljs.core.truth_(and__5043__auto__)){\nvar G__48646 = next_line;\nvar G__48646__$1 = (((G__48646 == null))?null:clojure.string.trim(G__48646));\nif((G__48646__$1 == null)){\nreturn null;\n} else {\nreturn clojure.string.ends_with_QMARK_(G__48646__$1,\"```\");\n}\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n});\nmarkdown.transformers.paragraph = (function markdown$transformers$paragraph(text,state){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(markdown.transformers.close_paragraph,markdown.transformers.open_paragraph(text,state));\n});\nmarkdown.transformers.code = (function markdown$transformers$code(text,p__48647){\nvar map__48648 = p__48647;\nvar map__48648__$1 = cljs.core.__destructure_map(map__48648);\nvar state = map__48648__$1;\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48648__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nvar indent_code_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48648__$1,new cljs.core.Keyword(null,\"indent-code-end\",\"indent-code-end\",644690061));\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48648__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48648__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48648__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48648__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48648__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\nvar should_close_QMARK_ = (function (){var or__5045__auto__ = eof;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn (!(((clojure.string.blank_QMARK_(next_line)) || (clojure.string.starts_with_QMARK_(next_line,\"    \")))));\n}\n})();\nif(cljs.core.truth_((function (){var or__5045__auto__ = lists;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(indent_code_end)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"indent-code-end\",\"indent-code-end\",644690061),new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175)], 0)),new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),true)], null);\n} else {\nif(cljs.core.truth_(code)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\\n\")),(cljs.core.truth_(should_close_QMARK_)?\"</code></pre>\":null)].join(''),(function (){var G__48649 = state;\nif(cljs.core.truth_(should_close_QMARK_)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__48649,new cljs.core.Keyword(null,\"indent-code-end\",\"indent-code-end\",644690061),true);\n} else {\nreturn G__48649;\n}\n})()], null);\n} else {\nif(cljs.core.truth_(paragraph)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.empty_QMARK_(clojure.string.trim(text))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar num_spaces = cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\" \"),text));\nif((num_spaces >= (4))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code>\",markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\")),(cljs.core.truth_(should_close_QMARK_)?\"</code></pre>\":null)].join(''),(function (){var G__48650 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175),true], 0));\nif(cljs.core.truth_(should_close_QMARK_)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__48650,new cljs.core.Keyword(null,\"indent-code-end\",\"indent-code-end\",644690061),true);\n} else {\nreturn G__48650;\n}\n})()], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n\n}\n}\n}\n}\n}\n});\nmarkdown.transformers.codeblock = (function markdown$transformers$codeblock(text,p__48651){\nvar map__48652 = p__48651;\nvar map__48652__$1 = cljs.core.__destructure_map(map__48652);\nvar state = map__48652__$1;\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48652__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar codeblock_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48652__$1,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736));\nvar indented_code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48652__$1,new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175));\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48652__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48652__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar trimmed = clojure.string.trim(text);\nvar next_line_closes_QMARK_ = (function (){var G__48653 = next_line;\nvar G__48653__$1 = (((G__48653 == null))?null:clojure.string.trim(G__48653));\nif((G__48653__$1 == null)){\nreturn null;\n} else {\nreturn clojure.string.ends_with_QMARK_(G__48653__$1,\"```\");\n}\n})();\nif(cljs.core.truth_((function (){var and__5043__auto__ = lists;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn codeblock_end;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\n} else {\nif(cljs.core.truth_(codeblock_end)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),true),new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = next_line_closes_QMARK_;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn codeblock;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[markdown.common.escape_code([cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.first(clojure.string.split.cljs$core$IFn$_invoke$arity$2(next_line,/```/))))].join('')),\"</code></pre>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),cljs.core.not(lists),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),cljs.core.not(lists)], 0))], null);\n} else {\nif(((cljs.core.not(indented_code)) && (clojure.string.starts_with_QMARK_(trimmed,\"```\")))){\nvar vec__48654 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"\\n\"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),trimmed));\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48654,(0),null);\nvar code = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48654,(1),null);\nvar lang__$1 = clojure.string.trim(clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang));\nvar s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.rest(code));\nvar formatter = new cljs.core.Keyword(null,\"code-style\",\"code-style\",-2144009586).cljs$core$IFn$_invoke$arity$1(state);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code\",((cljs.core.seq(lang__$1))?[\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(formatter)?(formatter.cljs$core$IFn$_invoke$arity$1 ? formatter.cljs$core$IFn$_invoke$arity$1(lang__$1) : formatter.call(null,lang__$1)):[\"class=\\\"\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang__$1),\"\\\"\"].join('')))].join(''):null),\">\",markdown.common.escape_code(((cljs.core.empty_QMARK_(s))?s:[cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\"\\n\"].join(''))),(cljs.core.truth_(next_line_closes_QMARK_)?\"</code></pre>\":null)].join(''),(cljs.core.truth_(next_line_closes_QMARK_)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),true], 0)):cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),true], 0)))], null);\n} else {\nif(cljs.core.truth_(codeblock)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[markdown.common.escape_code(text),\"\\n\"].join(''),state], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n\n}\n}\n}\n}\n}\n});\nmarkdown.transformers.hr = (function markdown$transformers$hr(text,state){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(((((cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"*\",null], null), null),text))) || (((cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"-\",null], null), null),text))) || (cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"_\",null], null), null),text))))))) && ((cljs.core.count(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),text)) > (2))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"<hr/>\",cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),true)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n}\n});\n/**\n * Check for blockquotes and signal to blockquote-2 function with\n *   states blockquote-start and blockquote-end so that tags can be added.\n *   This approach enables lists to be included in blockquotes.\n */\nmarkdown.transformers.blockquote_1 = (function markdown$transformers$blockquote_1(text,p__48657){\nvar map__48658 = p__48657;\nvar map__48658__$1 = cljs.core.__destructure_map(map__48658);\nvar state = map__48658__$1;\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48658__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48658__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48658__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar trimmed = clojure.string.trim(text);\nif(cljs.core.truth_((function (){var or__5045__auto__ = code;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190).cljs$core$IFn$_invoke$arity$1(state))){\nif(cljs.core.truth_((function (){var or__5045__auto__ = eof;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.empty_QMARK_(trimmed);\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),false], 0))], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",trimmed)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<p>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\n} else {\nif((((((trimmed).length) >= (2))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">-\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(2)))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<footer>\",cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(2)),\"</footer>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),false)], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(1)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(1)),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\n\n}\n}\n}\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.first(text))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(text)),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),true,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n\n}\n}\n});\n/**\n * Check for change in blockquote states and add start or end tags.\n *   Closing a blockquote with a list in it is a bit more complex,\n *   as the list is not closed until the following blank line.\n */\nmarkdown.transformers.blockquote_2 = (function markdown$transformers$blockquote_2(text,p__48663){\nvar map__48665 = p__48663;\nvar map__48665__$1 = cljs.core.__destructure_map(map__48665);\nvar state = map__48665__$1;\nvar blockquote_start = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48665__$1,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935));\nvar blockquote_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48665__$1,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964));\nvar blockquote_paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48665__$1,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48665__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar not_in_list = ((cljs.core.not(lists)) || (cljs.core.empty_QMARK_(lists)));\nif(cljs.core.truth_(blockquote_start)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<blockquote><p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935))], null);\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = blockquote_end;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn not_in_list;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),(cljs.core.truth_(blockquote_paragraph)?\"</p>\":null),\"</blockquote>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964)], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n\n}\n}\n});\nmarkdown.transformers.footer = (function markdown$transformers$footer(footnotes){\nif(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes))){\nreturn \"\";\n} else {\nreturn (function (p1__48667_SHARP_){\nreturn [\"<ol class='footnotes'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__48667_SHARP_),\"</ol>\"].join('');\n})(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (footnotes__$1,p__48668){\nvar vec__48669 = p__48668;\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48669,(0),null);\nvar label = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48669,(1),null);\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(footnotes__$1),\"<li id='fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\" \",label))),\"<a href='#fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>&#8617;</a></li>\"].join('');\n}),\"\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.sorted_map(),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes))));\n}\n});\n/**\n * Given a line of metadata header text return either a list containing a parsed\n *   and normalizd key and the original text of the value, or if no header is found\n *   (this is a continuation or new value from a pervious header key) simply\n *   return the text. If a blank or invalid line is found return nil.\n */\nmarkdown.transformers.parse_metadata_line = (function markdown$transformers$parse_metadata_line(line){\nif(cljs.core.truth_(line)){\nvar vec__48672 = cljs.core.re_matches(/^([0-9A-Za-z_-]*):(.*)$/,line);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48672,(0),null);\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48672,(1),null);\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48672,(2),null);\nvar vec__48675 = cljs.core.re_matches(/^    (.*)$/,line);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48675,(0),null);\nvar next_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48675,(1),null);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(clojure.string.trim(line),\"\")){\nif(cljs.core.truth_(key)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case(key)),val], null);\n} else {\nif(cljs.core.truth_(next_val)){\nreturn line;\n} else {\nreturn null;\n}\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given a list of maps which contain a single key/value, flatten them all into\n *   a single map with all the leading spaces removed. If an empty list is provided\n *   then return nil.\n */\nmarkdown.transformers.flatten_metadata = (function markdown$transformers$flatten_metadata(metadata){\nif((cljs.core.count(metadata) > (0))){\nvar acc = cljs.core.PersistentArrayMap.EMPTY;\nvar remain = metadata;\nvar prev_key = null;\nwhile(true){\nif(cljs.core.seq(remain)){\nvar data = cljs.core.first(remain);\nvar vec__48681 = ((cljs.core.sequential_QMARK_(data))?data:new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prev_key,data], null));\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48681,(0),null);\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48681,(1),null);\nvar prev_val = cljs.core.get.cljs$core$IFn$_invoke$arity$3(acc,key,cljs.core.PersistentVector.EMPTY);\nvar postfix = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),val)))?\"\\n\":\"\");\nvar norm_val = [clojure.string.trim(val),postfix].join('');\nvar new_val = (((!(cljs.core.empty_QMARK_(norm_val))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(prev_val,norm_val):prev_val);\nvar G__48719 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,cljs.core.PersistentArrayMap.createAsIfByAssoc([key,new_val])], 0));\nvar G__48720 = cljs.core.rest(remain);\nvar G__48721 = key;\nacc = G__48719;\nremain = G__48720;\nprev_key = G__48721;\ncontinue;\n} else {\nreturn acc;\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\nmarkdown.transformers.parse_wiki_metadata_headers = (function markdown$transformers$parse_wiki_metadata_headers(lines_seq){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,line){\nvar temp__5802__auto__ = markdown.transformers.parse_metadata_line(line);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar parsed = temp__5802__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,parsed);\n} else {\nreturn cljs.core.reduced(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.flatten_metadata(acc),cljs.core.count(acc)], null));\n}\n}),cljs.core.PersistentVector.EMPTY,lines_seq);\n});\nmarkdown.transformers.parse_yaml_metadata_headers = (function markdown$transformers$parse_yaml_metadata_headers(lines_seq){\nthrow (new Error(\"YAML is unsupported in ClojureScript mode\"));\n});\nmarkdown.transformers.parse_edn_metadata_headers = (function markdown$transformers$parse_edn_metadata_headers(lines_seq){\nvar meta_lines = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.re_matches,/\\s*/)),lines_seq);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.edn.read_string.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",meta_lines)),(cljs.core.count(meta_lines) + (1))], null);\n});\n/**\n * Given a sequence of lines from a markdown document, attempt to parse a\n *   metadata header if it exists. Accepts wiki, yaml, and edn formats.\n * \n *   Returns the parsed headers number of lines the metadata spans\n */\nmarkdown.transformers.parse_metadata_headers = (function markdown$transformers$parse_metadata_headers(lines_seq){\n\n\nif(cljs.core.truth_(cljs.core.re_matches(/---\\s*/,cljs.core.first(lines_seq)))){\nreturn markdown.transformers.parse_yaml_metadata_headers(lines_seq);\n} else {\nif(cljs.core.truth_(cljs.core.re_matches(/\\w+: .*/,cljs.core.first(lines_seq)))){\nreturn markdown.transformers.parse_wiki_metadata_headers(lines_seq);\n} else {\nif(cljs.core.truth_(cljs.core.re_matches(/\\{.*/,cljs.core.first(lines_seq)))){\nreturn markdown.transformers.parse_edn_metadata_headers(lines_seq);\n} else {\nreturn null;\n}\n}\n}\n});\nmarkdown.transformers.transformer_vector = cljs.core.PersistentVector.fromArray([markdown.transformers.set_line_state,markdown.transformers.empty_line,markdown.common.inhibit,markdown.common.escape_inhibit_separator,markdown.transformers.code,markdown.transformers.codeblock,markdown.common.escaped_chars,markdown.common.inline_code,markdown.transformers.autoemail_transformer,markdown.transformers.autourl_transformer,markdown.links.image,markdown.links.image_reference_link,markdown.links.link,markdown.links.implicit_reference_link,markdown.links.reference_link,markdown.links.footnote_link,markdown.transformers.hr,markdown.transformers.blockquote_1,markdown.lists.li,markdown.transformers.heading,markdown.transformers.blockquote_2,markdown.common.italics,markdown.common.bold_italic,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough,markdown.transformers.superscript,markdown.tables.table,markdown.transformers.paragraph,markdown.transformers.br,markdown.common.thaw_strings,markdown.common.dashes,markdown.transformers.clear_line_state], true);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/transformers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.transformers","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^L","~$markdown.tables","^M","~$goog","^N","~$markdown.lists","^O","~$string","~$clojure.string","~$markdown.links","^R","~$clojure.edn","^S","^Q","^Q","~$edn","^S","~$markdown.common","^U"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$italics","^U","~$make-heading","^U","~$dashes","^U","~$thaw-strings","^U","~$inhibit","^U","~$implicit-reference-link","^R","~$bold","^U","~$freeze-string","^U","~$footnote-link","^R","~$escape-code","^U","~$table","^M","~$strong","^U","~$li","^O","~$reference-link","^R","~$image-reference-link","^R","~$em","^U","~$escaped-chars","^U","~$inline-code","^U","~$strikethrough","^U","~$bold-italic","^U","~$link","^R","~$escape-inhibit-separator","^U","~$image","^R"],"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^F",["^1F",["^W",["^Q","~:as","^P"],["^S","^1H","^T"],["^R","~:refer",["^1A","^1C","^1:","^1;","^12","^15"]],["^O","^1I",["^19"]],["^M","^1I",["^17"]],["^U","^1I",["^16","^1=","^14","^10","^18","^13","^1@","^1<","^Y","^1?","^1>","^1B","^11","^Z","^["]]]]]],"~:flags",["^ ","^W",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^N","^L","^Q","^S","^R","^O","^M","^U"]],"^I","^F","~:resource-id",["~:shadow.build.classpath/resource","markdown/transformers.cljc"],"~:compiled-at",1681910511857,"^G",["^ ","^L","^L","^M","^M","^N","^N","^O","^O","^P","^Q","^R","^R","^S","^S","^Q","^Q","^T","^S","^U","^U"],"~:resource-name","markdown/transformers.cljc","~:warnings",[],"~:source","(ns markdown.transformers\n  (:require [clojure.string :as string]\n            [clojure.edn :as edn]\n            [markdown.links\n             :refer [link\n                     image\n                     reference-link\n                     image-reference-link\n                     implicit-reference-link\n                     footnote-link]]\n            [markdown.lists :refer [li]]\n            [markdown.tables :refer [table]]\n            [markdown.common\n             :refer\n             [escape-code\n              escaped-chars\n              freeze-string\n              thaw-strings\n              strong\n              bold\n              bold-italic\n              em\n              italics\n              strikethrough\n              inline-code\n              escape-inhibit-separator\n              inhibit\n              make-heading\n              dashes]]\n            #?(:clj [clj-yaml.core :as yaml])))\n\n(def ^:dynamic *formatter*)\n\n(defn heading? [text type]\n  (when-not (every? #{\\space} (take 4 text))\n    (let [trimmed (some-> text string/trim)]\n      (and (not-empty trimmed) (every? #{type} trimmed)))))\n\n(defn h1? [text]\n  (heading? text \\=))\n\n(defn h2? [text]\n  (heading? text \\-))\n\n(defn empty-line [text {:keys [code codeblock] :as state}]\n  (if (or code codeblock)\n    [text state]\n    [(if (or (h1? text) (h2? text)) \"\" text)\n     (if (string/blank? text) (dissoc state :hr :heading) state)]))\n\n(defn superscript [text state]\n  (if (:code state)\n    [text state]\n    (let [tokens (partition-by (partial contains? #{\\^ \\space}) text)]\n      (loop [buf       []\n             remaining tokens]\n        (cond\n          (empty? remaining)\n          [(string/join buf) state]\n\n          (= (first remaining) [\\^])\n          (recur (into buf (concat (seq \"<sup>\") (second remaining) (seq \"</sup>\")))\n                 (drop 2 remaining))\n\n          :default\n          (recur (into buf (first remaining)) (rest remaining)))))))\n\n(defn heading [text {:keys [buf next-line code codeblock heading-anchors] :as state}]\n  (cond\n    (or codeblock code)\n    [text state]\n\n    (h1? (or buf next-line))\n    [(str \"<h1>\" text \"</h1>\") (assoc state :heading true)]\n\n    (h2? (or buf next-line))\n    [(str \"<h2>\" text \"</h2>\") (assoc state :heading true)]\n\n    :else\n    (if-let [heading (make-heading text heading-anchors)]\n      [heading (assoc state :inline-heading true)]\n      [text state])))\n\n(defn br [text {:keys [code lists] :as state}]\n  [(if (and (= [\\space \\space] (take-last 2 text))\n            (not (or code lists)))\n     (str (apply str (drop-last 2 text)) \"<br />\")\n     text)\n   state])\n\n(defn autourl-transformer [text {:keys [code frozen-strings] :as state}]\n  (if code\n    [text state]\n    (let [currently-frozen (volatile! {:frozen-strings frozen-strings})]\n      [(string/replace\n         text\n         #\"<https?://[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]>\"\n         #(let [[url frozen-strings] (freeze-string (subs % 1 (dec (count %))) @currently-frozen)]\n            (vreset! currently-frozen frozen-strings)\n            (str \"<a href=\\\"\" url \"\\\">\" url \"</a>\")))\n       (merge state @currently-frozen)])))\n\n(defn autoemail-transformer [text state]\n  (let [left-pad (fn [s]\n                   (cond->> s\n                            (= 1 (count s)) (str \"0\")))\n        encoder  (if (:clojurescript state)\n                   (fn [c] (str \"&#x\" (-> c (.charCodeAt 0) (.toString 16) left-pad) \";\"))\n                   (fn [c] (*formatter* \"&#x%02x;\" (int c))))]\n    [(if (or (:code state) (:codeblock state))\n       text\n       (string/replace\n         text\n         #\"<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>\"\n         #(let [encoded (->> (subs % 1 (dec (count %)))\n                             (map encoder)\n                             (apply str))]\n            (str \"<a href=\\\"mailto:\" encoded \"\\\">\" encoded \"</a>\"))))\n     state]))\n\n(defn set-line-state [text {:keys [inline-heading] :as state}]\n  [text\n   (-> state\n       (dissoc :inline-heading)\n       (assoc-in [:temp :inline-heading] inline-heading))])\n\n(defn clear-line-state [text state]\n  [text (dissoc state :temp)])\n\n(defn paragraph-text [last-line-empty? text]\n  (if (and (not last-line-empty?) (not-empty text))\n    (str \" \" text)\n    text))\n\n(defn open-paragraph\n  [text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?] :as state}]\n  (cond\n    (and paragraph lists)\n    [(str \"</p>\" text) (dissoc state :paragraph)]\n\n    (or heading inline-heading hr code lists blockquote)\n    [text state]\n\n    paragraph\n    (if (or eof (empty? (string/trim text)))\n      [(str (paragraph-text last-line-empty? text) \"</p>\") (dissoc state :paragraph)]\n      [(paragraph-text last-line-empty? text) state])\n\n    (and (not eof) (not (string/blank? text)) (or (:inline-heading temp) last-line-empty?))\n    [(str \"<p>\" text) (assoc state :paragraph true :last-line-empty? false)]\n\n    :default\n    [text state]))\n\n(defn close-paragraph [text {:keys [next-line paragraph] :as state}]\n  (if (and paragraph (some-> next-line string/trim (string/ends-with? \"```\")))\n    [(str text \"</p>\") (dissoc state :paragraph)]\n    [text state]))\n\n(defn paragraph [text state]\n  (apply close-paragraph (open-paragraph text state)))\n\n(defn code [text {:keys [eof indent-code-end next-line lists code codeblock paragraph] :as state}]\n  (let [should-close? (or eof\n                          (not (or (string/blank? next-line)\n                                   (string/starts-with? next-line \"    \"))))]\n    (cond\n      (or lists codeblock)\n      [text state]\n\n      indent-code-end\n      [text (-> state\n                (dissoc :code :indent-code-end :indented-code)\n                (assoc :last-line-empty? true))]\n\n      code\n      [(str (escape-code (string/replace-first text #\"    \" \"\\n\"))\n            (when should-close? \"</code></pre>\"))\n       (cond-> state\n         should-close? (assoc :indent-code-end true))]\n\n      paragraph\n      [text state]\n\n      (empty? (string/trim text))\n      [text state]\n\n      :default\n      (let [num-spaces (count (take-while (partial = \\space) text))]\n        (if (>= num-spaces 4)\n          [(str \"<pre><code>\"\n                (escape-code (string/replace-first text #\"    \" \"\"))\n                (when should-close? \"</code></pre>\"))\n           (cond-> (assoc state :code true :indented-code true)\n             should-close? (assoc :indent-code-end true))]\n          [text state])))))\n\n(defn codeblock [text {:keys [codeblock codeblock-end indented-code next-line lists] :as state}]\n  (let [trimmed           (string/trim text)\n        next-line-closes? (some-> next-line string/trim (string/ends-with? \"```\"))]\n    (cond\n      (and lists codeblock-end)\n      [\"\" (dissoc state :code :codeblock :codeblock-end)]\n\n      codeblock-end\n      [text (-> state\n                (assoc :last-line-empty? true)\n                (dissoc :code :codeblock :codeblock-end))]\n\n      (and next-line-closes? codeblock)\n      [(str (escape-code (str text \\newline (apply str (first (string/split next-line #\"```\"))))) \"</code></pre>\")\n       (assoc state :skip-next-line? (not lists)\n                    :codeblock-end true\n                    :last-line-empty? (not lists))]\n\n      (and\n        (not indented-code)\n        (string/starts-with? trimmed \"```\"))\n      (let [[lang code] (split-with (partial not= \\newline) (drop 3 trimmed))\n            lang      (string/trim (string/join lang))\n            s         (apply str (rest code))\n            formatter (:code-style state)]\n        [(str \"<pre><code\" (when (seq lang)\n                             (str \" \"\n                                  (if formatter\n                                    (formatter lang)\n                                    (str \"class=\\\"\" (string/join lang) \"\\\"\")))) \">\"\n              (escape-code (if (empty? s) s (str s \"\\n\")))\n              (when next-line-closes? \"</code></pre>\"))\n         (if next-line-closes?\n           (assoc state :codeblock-end true :skip-next-line? true)\n           (assoc state :code true :codeblock true))])\n\n      codeblock\n      [(str (escape-code text) \"\\n\") state]\n\n      :default\n      [text state])))\n\n(defn hr [text state]\n  (if (:code state)\n    [text state]\n    (if (and\n          (or (empty? (drop-while #{\\* \\space} text))\n              (empty? (drop-while #{\\- \\space} text))\n              (empty? (drop-while #{\\_ \\space} text)))\n          (> (count (remove #{\\space} text)) 2))\n      [(str \"<hr/>\") (assoc state :hr true)]\n      [text state])))\n\n(defn blockquote-1\n  \"Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes.\"\n  [text {:keys [eof code codeblock] :as state}]\n  (let [trimmed (string/trim text)]\n    (cond\n      (or code codeblock)\n      [text state]\n\n      (:blockquote state)\n      (cond (or eof (empty? trimmed))\n            [text (assoc state :blockquote-end true :blockquote false)]\n\n            (= \">\" trimmed)\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<p>\") (assoc state :blockquote-paragraph true)]\n\n            (and (>= (count trimmed) 2) (= \">-\" (subs trimmed 0 2)))\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<footer>\" (subs text 2) \"</footer>\") (assoc state :blockquote-paragraph false)]\n\n            (= \">\" (subs trimmed 0 1))\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") (subs text 1) \" \") (assoc state :blockquote-paragraph true)]\n\n            :default\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") text \" \") (assoc state :blockquote-paragraph true)])\n\n      :default\n      (if (= \\> (first text))\n        [(str (string/join (rest text)) \" \")\n         (assoc state :blockquote-start true :blockquote true :blockquote-paragraph true)]\n        [text state]))))\n\n(defn blockquote-2\n  \"Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line.\"\n  [text {:keys [blockquote-start blockquote-end blockquote-paragraph lists] :as state}]\n  (let [not-in-list (or (not lists) (empty? lists))]\n    (cond blockquote-start\n          [(str \"<blockquote><p>\" text)\n           (dissoc state :blockquote-start)]\n\n          (and blockquote-end not-in-list)\n          [(str text (when blockquote-paragraph \"</p>\") \"</blockquote>\")\n           (dissoc state :blockquote :blockquote-paragraph :blockquote-end)]\n\n          :default\n          [text state])))\n\n(defn footer [footnotes]\n  (if (empty? (:processed footnotes))\n    \"\"\n    (->> (:processed footnotes)\n         (into (sorted-map))\n         (reduce\n           (fn [footnotes [id label]]\n             (str footnotes\n                  \"<li id='fn-\" id \"'>\"\n                  (apply str (interpose \" \" label))\n                  \"<a href='#fnref\" id \"'>&#8617;</a></li>\"))\n           \"\")\n         (#(str \"<ol class='footnotes'>\" % \"</ol>\")))))\n\n(defn parse-metadata-line\n  \"Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil.\"\n  [line]\n  (when line\n    (let [[_ key val] (re-matches #\"^([0-9A-Za-z_-]*):(.*)$\" line)\n          [_ next-val] (re-matches #\"^    (.*)$\" line)]\n      (when (not= (string/trim line) \"\")\n        (cond\n          key [(keyword (string/lower-case key)) val]\n          next-val line)))))\n\n(defn flatten-metadata\n  \"Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil.\"\n  [metadata]\n  (when (pos? (count metadata))\n    (loop [acc      {}\n           remain   metadata\n           prev-key nil]\n      (if (seq remain)\n        (let [data     (first remain)\n              [key val] (if (sequential? data) data [prev-key data])\n              prev-val (get acc key [])\n              postfix  (if (= [\\space \\space] (take-last 2 val)) \"\\n\" \"\")\n              norm-val (str (string/trim val) postfix)\n              new-val  (if-not (empty? norm-val)\n                         (conj prev-val norm-val)\n                         prev-val)]\n          (recur (merge acc {key new-val}) (rest remain) key))\n        acc))))\n\n\n(defn parse-wiki-metadata-headers\n  [lines-seq]\n  (reduce\n    (fn [acc line]\n      (if-let [parsed (parse-metadata-line line)]\n        (conj acc parsed)\n        (reduced [(flatten-metadata acc) (count acc)])))\n    [] lines-seq))\n\n(defn parse-yaml-metadata-headers\n  [lines-seq]\n  #?(:clj\n     (let [yaml-lines (->> lines-seq\n                           ;; leave off opening ---\n                           (drop 1)\n                           ;; take lines until we see the closing ---\n                           (take-while (comp not (partial re-matches #\"---\\s*\"))))]\n       [(->> yaml-lines\n             ;; join together and parse\n             (string/join \"\\n\")\n             yaml/parse-string)\n        ;; number of lines consumed must consider opening and closing ---\n        (+ (count yaml-lines) 2)])\n     :cljs\n     (throw (js/Error. \"YAML is unsupported in ClojureScript mode\"))))\n\n(defn parse-edn-metadata-headers\n  [lines-seq]\n  ;; take sequences until you hit an empty line\n  (let [meta-lines (take-while (comp not (partial re-matches #\"\\s*\"))\n                               lines-seq)]\n    [(->> meta-lines\n          ;; join together and parse\n          (string/join \"\\n\")\n          edn/read-string)\n     ;; count the trailing empty line\n     (inc (count meta-lines))]))\n\n(defn parse-metadata-headers\n  \"Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats.\n   \n  Returns the parsed headers number of lines the metadata spans\"\n  [lines-seq]\n  {:pre [(sequential? lines-seq)\n         (every? string? lines-seq)]}\n  (cond\n    ;; Treat as yaml\n    (re-matches #\"---\\s*\" (first lines-seq))\n    (parse-yaml-metadata-headers lines-seq)\n    ;; Treat as wiki\n    (re-matches #\"\\w+: .*\" (first lines-seq))\n    (parse-wiki-metadata-headers lines-seq)\n    ;; Treat as edn\n    (re-matches #\"\\{.*\" (first lines-seq))\n    (parse-edn-metadata-headers lines-seq)))\n\n(def transformer-vector\n  [set-line-state\n   empty-line\n   inhibit\n   escape-inhibit-separator\n   code\n   codeblock\n   escaped-chars\n   inline-code\n   autoemail-transformer\n   autourl-transformer\n   image\n   image-reference-link\n   link\n   implicit-reference-link\n   reference-link\n   footnote-link\n   hr\n   blockquote-1\n   li\n   heading\n   blockquote-2\n   italics\n   bold-italic\n   em\n   strong\n   bold\n   strikethrough\n   superscript\n   table\n   paragraph\n   br\n   thaw-strings\n   dashes\n   clear-line-state])\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.transformers/heading?","text","type","cljs.core/every?","cljs.core.take","trimmed","G__48625","clojure.string/trim","and__5043__auto__","cljs.core/not-empty","markdown.transformers/h1?","markdown.transformers/h2?","p__48626","map__48627","cljs.core/--destructure-map","cljs.core.get","markdown.transformers/empty-line","code","codeblock","state","or__5045__auto__","clojure.string/blank?","cljs.core.dissoc","markdown.transformers/superscript","tokens","cljs.core.partition_by","cljs.core.partial","cljs.core/contains?","buf","remaining","cljs.core/empty?","clojure.string.join","cljs.core._EQ_","cljs.core/first","cljs.core.into","cljs.core.concat","cljs.core/seq","cljs.core/second","cljs.core.drop","cljs.core/rest","p__48628","map__48629","markdown.transformers/heading","next-line","heading-anchors","cljs.core.assoc","temp__5802__auto__","heading","markdown.common/make-heading","p__48630","map__48631","markdown.transformers/br","lists","cljs.core/take-last","cljs.core/not","cljs.core.apply","cljs.core/str","cljs.core.drop_last","p__48633","map__48634","markdown.transformers/autourl-transformer","frozen-strings","currently-frozen","cljs.core/volatile!","p1__48632#","clojure.string/replace","vec__48635","cljs.core.nth","url","cljs.core/deref","markdown.common.freeze_string","cljs.core.subs","cljs.core/count","cljs.core/vreset!","cljs.core.merge","markdown.transformers/autoemail-transformer","left-pad","s","G__48639","encoder","c","markdown.transformers/*formatter*","p1__48638#","encoded","cljs.core.map","p__48640","map__48641","markdown.transformers/set-line-state","inline-heading","cljs.core/assoc-in","markdown.transformers/clear-line-state","markdown.transformers/paragraph-text","last-line-empty?","p__48642","map__48643","markdown.transformers/open-paragraph","eof","temp","hr","blockquote","paragraph","p__48644","map__48645","markdown.transformers/close-paragraph","G__48646","clojure.string/ends-with?","markdown.transformers/paragraph","p__48647","map__48648","markdown.transformers/code","indent-code-end","should-close?","clojure.string/starts-with?","markdown.common/escape-code","clojure.string/replace-first","G__48649","num-spaces","cljs.core.take_while","cljs.core/=","G__48650","p__48651","map__48652","markdown.transformers/codeblock","codeblock-end","indented-code","next-line-closes?","G__48653","clojure.string.split","vec__48654","lang","cljs.core/split-with","cljs.core/not=","formatter","markdown.transformers/hr","cljs.core.drop_while","cljs.core.remove","p__48657","map__48658","markdown.transformers/blockquote-1","p__48663","map__48665","markdown.transformers/blockquote-2","blockquote-start","blockquote-end","blockquote-paragraph","not-in-list","markdown.transformers/footer","footnotes","cljs.core/sorted-map","cljs.core.reduce","p__48668","vec__48669","id","label","cljs.core.interpose","p1__48667#","markdown.transformers/parse-metadata-line","line","vec__48672","vec__48675","_","key","val","cljs.core/re-matches","next-val","cljs.core.not_EQ_","cljs.core.keyword","clojure.string/lower-case","markdown.transformers/flatten-metadata","metadata","acc","remain","prev-key","vec__48681","data","cljs.core/sequential?","prev-val","postfix","norm-val","new-val","cljs.core.conj","markdown.transformers/parse-wiki-metadata-headers","lines-seq","parsed","cljs.core/reduced","markdown.transformers/parse-yaml-metadata-headers","js/Error","markdown.transformers/parse-edn-metadata-headers","meta-lines","cljs.core.comp","clojure.edn.read_string","markdown.transformers/parse-metadata-headers","markdown.transformers/transformer-vector","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/escaped-chars","markdown.common/inline-code","markdown.links/image","markdown.links/image-reference-link","markdown.links/link","markdown.links/implicit-reference-link","markdown.links/reference-link","markdown.links/footnote-link","markdown.lists/li","markdown.common/italics","markdown.common/bold-italic","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.tables/table","markdown.common/thaw-strings","markdown.common/dashes"]],"~:used-vars",["^D",["~$cljs.core/--destructure-map","~$markdown.transformers/flatten-metadata","~$clojure.string/replace-first","~$clojure.string/join","~$cljs.core/comp","~$cljs.core/rest","~$markdown.links/link","~$cljs.core/keyword","~$markdown.links/footnote-link","~$markdown.transformers/heading?","~$markdown.common/bold-italic","~$cljs.core/str","~$markdown.transformers/close-paragraph","~$cljs.core/sequential?","~$clojure.string/starts-with?","~$markdown.common/freeze-string","~$markdown.transformers/codeblock","~$markdown.transformers/h1?","~$markdown.transformers/hr","~$markdown.common/escaped-chars","~$clojure.string/split","~$clojure.edn/read-string","~$clojure.string/blank?","~$markdown.transformers/autoemail-transformer","~$cljs.core/=","~$markdown.links/image","~$markdown.common/escape-code","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.core/take-while","~$markdown.transformers/clear-line-state","~$markdown.transformers/paragraph-text","~$cljs.core/drop-while","~$markdown.transformers/parse-metadata-line","~$markdown.common/bold","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/take","~$markdown.common/escape-inhibit-separator","~$cljs.core/vreset!","~$cljs.core/not=","~$cljs.core/dissoc","~$cljs.core/concat","~$clojure.string/ends-with?","~$markdown.common/em","~$markdown.transformers/open-paragraph","~$cljs.core/empty?","~$markdown.common/strikethrough","~$cljs.core/contains?","~$cljs.core/into","~$markdown.transformers/parse-yaml-metadata-headers","~$cljs.core/conj","~$markdown.transformers/superscript","~$markdown.transformers/*formatter*","~$markdown.common/thaw-strings","~$markdown.common/dashes","~$cljs.core/map","~$markdown.transformers/blockquote-1","~$markdown.tables/table","~$markdown.common/inhibit","~$cljs.core/volatile!","~$cljs.core/get","~$markdown.transformers/set-line-state","~$cljs.core/partition-by","~$cljs.core/remove","~$cljs.core/drop-last","~$cljs.core/not-empty","~$markdown.links/image-reference-link","~$markdown.transformers/code","~$markdown.common/strong","~$markdown.transformers/transformer-vector","~$cljs.core/reduced","~$cljs.core/nth","~$cljs.core/second","~$clojure.string/replace","~$markdown.common/italics","~$cljs.core/split-with","~$markdown.common/inline-code","~$clojure.string/lower-case","~$cljs.core/sorted-map","~$markdown.transformers/br","~$markdown.transformers/blockquote-2","~$cljs.core/not","~$markdown.transformers/parse-metadata-headers","~$cljs.core/assoc","~$cljs.core/interpose","~$markdown.links/implicit-reference-link","~$markdown.transformers/h2?","~$cljs.core/assoc-in","~$clojure.string/trim","~$markdown.transformers/parse-wiki-metadata-headers","~$markdown.transformers/empty-line","~$markdown.transformers/footer","~$cljs.core/take-last","~$markdown.common/make-heading","~$markdown.transformers/autourl-transformer","~$cljs.core/first","~$cljs.core/subs","~$cljs.core/merge","~$cljs.core/every?","~$markdown.transformers/heading","~$markdown.links/reference-link","~$js/Error","~$markdown.lists/li","~$markdown.transformers/parse-edn-metadata-headers","~$markdown.transformers/paragraph","~$cljs.core/drop"]]],"~:cache-keys",["~#cmap",[["^1N","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^N","~$goog.dom.HtmlElement"]]],["^1N","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^Q","~$goog.string"]]],["^1N","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1N","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4O"]]],["^1N","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P"]]],["^1N","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","markdown/transformers.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^Q","^S","^R","^O","^M","^U"]]],["^1N","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4K","~$goog.string.StringBuffer"]]],["^1N","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L"]]],["^1N","markdown/common.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^Q"]]],["^1N","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^4X","^4Y","^4Z","^4W","^4L","^4K","^50"]]],["^1N","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P"]]],"~:SHADOW-TIMESTAMP",[1681908370000,1681908370000,1681908362000],["^1N","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P","~$goog.reflect"]]],["^1N","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P","~$goog.fs.blob","^4Q","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4S","^4T","^4U","^4V"]]],["^1N","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4U","~$goog.html.SafeUrl","^4V","^4P","^4O"]]],["^1N","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^54","~$goog.html.SafeStyle","^56","^4R","~$goog.html.uncheckedconversions","^4U","^4O"]]],["^1N","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4U","^4S","^4T","^54","^5:","~$goog.html.SafeStyleSheet","^56","~$goog.dom.TagName","^4R","^4V","^4P","~$goog.labs.userAgent.browser","^4L","^4M","^4O","~$goog.dom.tags","^55"]]],["^1N","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4M"]]],["^1N","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^4M","^4[","~$cljs.tools.reader.edn","^50"]]],["^1N","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1N","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4L","^4P","~$goog.collections.maps","^4K","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1N","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","clojure/edn.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","~$cljs.reader"]]],["^1N","markdown/tables.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^Q"]]],["^1N","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",[]]],["^1N","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4L","^4M"]]],["^1N","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^4X","^Q","~$cljs.tools.reader.impl.inspect"]]],["^1N","markdown/lists.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^Q","^U"]]],["^1N","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^4K","^50"]]],["^1N","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","~$goog.dom.safe","^5;","^4U","^4O"]]],["^1N","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","~$goog.labs.userAgent","^4O"]]],["^1N","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^4Y","^4K","^50"]]],["^1N","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P","^59","^54","^5:","^5<","^56","^4R","^4U","^4O","^4S"]]],["^1N","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^4W","^4X","^4Y"]]],["^1N","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N"]]],["^1N","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","~$goog.math.Long","~$goog.math.Integer","^4K","^4M","^4L","~$goog.Uri","^50"]]],["^1N","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4U","^4V","^55","^4P"]]],["^1N","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4U","^5:","^4V","^4M","^4P","^4O"]]],["^1N","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^52"]]],["^1N","markdown/links.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^L","^Q","^U"]]],["^1N","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P","^4K"]]],["^1N","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4F",["^ ","^4G",null,"^4H",["^D",[]],"^4I",["^N","^4P","^4V"]]]]],"~:clj-info",["^ ","jar:file:/home/janet1204/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1681908360000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1681908362000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/transformers.cljc","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^G",["^ "],"^J",null,"^K",["^ ","^L","^L","^M","^M","^N","^N","^O","^O","^P","^Q","^R","^R","^S","^S","^Q","^Q","^T","^S","^U","^U"],"^V",["^D",["^W"]],"~:shadow/js-access-global",["^D",["Error"]],"^X",["^ ","^Y","^U","^Z","^U","^[","^U","^10","^U","^11","^U","^12","^R","^13","^U","^14","^U","^15","^R","^16","^U","^17","^M","^18","^U","^19","^O","^1:","^R","^1;","^R","^1<","^U","^1=","^U","^1>","^U","^1?","^U","^1@","^U","^1A","^R","^1B","^U","^1C","^R"],"~:defs",["^ ","~$parse-wiki-metadata-headers",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",350,"^8",7,"^9",350,"^:",34,"~:arglists",["^1F",["~$quote",["^1F",[["~$lines-seq"]]]]]],"^E","^43","^6","markdown/transformers.cljc","^:",34,"~:method-params",["^1F",[["^6J"]]],"~:protocol-impl",null,"~:arglists-meta",["^1F",[null,null]],"^8",1,"~:variadic?",false,"^7",350,"~:ret-tag",["^D",[null,"~$any"]],"^9",350,"~:max-fixed-arity",1,"~:fn-var",true,"^6H",["^1F",["^6I",["^1F",[["^6J"]]]]]],"~$h2?",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",42,"^8",7,"^9",42,"^:",10,"^6H",["^1F",["^6I",["^1F",[["~$text"]]]]]],"^E","^40","^6","markdown/transformers.cljc","^:",10,"^6K",["^1F",[["^6T"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",42,"^6O",["^D",[null,"~$boolean","~$clj-nil"]],"^9",42,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T"]]]]]],"~$*formatter*",["^ ","^5",["^ ","^6","markdown/transformers.cljc","^7",32,"^8",16,"^9",32,"^:",27,"~:dynamic",true],"^E","^3:","^6","markdown/transformers.cljc","^:",27,"^8",1,"^6X",true,"^7",32,"^9",32,"~:tag","^6P"],"~$parse-yaml-metadata-headers",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",359,"^8",7,"^9",359,"^:",34,"^6H",["^1F",["^6I",["^1F",[["^6J"]]]]]],"^E","^37","^6","markdown/transformers.cljc","^:",34,"^6K",["^1F",[["^6J"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",359,"^6O","~$ignore","^9",359,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6J"]]]]]],"~$paragraph",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",160,"^8",7,"^9",160,"^:",16,"^6H",["^1F",["^6I",["^1F",[["^6T","~$state"]]]]]],"^E","^4B","^6","markdown/transformers.cljc","^:",16,"^6K",["^1F",[["^6T","^71"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",160,"^6O","^6P","^9",160,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"~$close-paragraph",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",155,"^8",7,"^9",155,"^:",22,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","~:keys",["~$next-line","^70"],"^1H","^71"]]]]]]],"^E","^2:","^6","markdown/transformers.cljc","^:",22,"^6K",["^1F",[["^6T","~$p__48644"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",155,"^6O","~$cljs.core/IVector","^9",155,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^74","^70"],"^1H","^71"]]]]]]],"~$blockquote-1",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",251,"^8",7,"^9",251,"^:",19,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["~$eof","~$code","~$codeblock"],"^1H","^71"]]]]]],"~:doc","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"^E","^3>","^6","markdown/transformers.cljc","^:",19,"^6K",["^1F",[["^6T","~$p__48657"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",251,"^6O","^76","^9",251,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^78","^79","^7:"],"^1H","^71"]]]]]],"^7;","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"~$heading",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",68,"^8",7,"^9",68,"^:",14,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["~$buf","^74","^79","^7:","~$heading-anchors"],"^1H","^71"]]]]]]],"^E","^4=","^6","markdown/transformers.cljc","^:",14,"^6K",["^1F",[["^6T","~$p__48628"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",68,"^6O","^76","^9",68,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^7>","^74","^79","^7:","^7?"],"^1H","^71"]]]]]]],"~$superscript",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",51,"^8",7,"^9",51,"^:",18,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"^E","^39","^6","markdown/transformers.cljc","^:",18,"^6K",["^1F",[["^6T","^71"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",51,"^6O","^76","^9",51,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"~$autourl-transformer",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",91,"^8",7,"^9",91,"^:",26,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^79","~$frozen-strings"],"^1H","^71"]]]]]]],"^E","^48","^6","markdown/transformers.cljc","^:",26,"^6K",["^1F",[["^6T","~$p__48633"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",91,"^6O","^76","^9",91,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^79","^7C"],"^1H","^71"]]]]]]],"~$h1?",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",39,"^8",7,"^9",39,"^:",10,"^6H",["^1F",["^6I",["^1F",[["^6T"]]]]]],"^E","^2?","^6","markdown/transformers.cljc","^:",10,"^6K",["^1F",[["^6T"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",39,"^6O",["^D",[null,"^6U","^6V"]],"^9",39,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T"]]]]]],"^7:",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",198,"^8",7,"^9",198,"^:",16,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^7:","~$codeblock-end","~$indented-code","^74","~$lists"],"^1H","^71"]]]]]]],"^E","^2>","^6","markdown/transformers.cljc","^:",16,"^6K",["^1F",[["^6T","~$p__48651"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",198,"^6O","^76","^9",198,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^7:","^7F","^7G","^74","^7H"],"^1H","^71"]]]]]]],"~$flatten-metadata",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",328,"^8",7,"^9",328,"^:",23,"^6H",["^1F",["^6I",["^1F",[["~$metadata"]]]]],"^7;","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"^E","^1[","^6","markdown/transformers.cljc","^:",23,"^6K",["^1F",[["^7K"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",328,"^6O",["^D",["^6P","^6V"]],"^9",328,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^7K"]]]]],"^7;","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"~$hr",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",240,"^8",7,"^9",240,"^:",9,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"^E","^2@","^6","markdown/transformers.cljc","^:",9,"^6K",["^1F",[["^6T","^71"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",240,"^6O","^76","^9",240,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"~$transformer-vector",["^ ","^E","^3K","^6","markdown/transformers.cljc","^7",407,"^8",1,"^9",407,"^:",24,"^5",["^ ","^6","markdown/transformers.cljc","^7",407,"^8",6,"^9",407,"^:",24],"^6Y","^76"],"~$autoemail-transformer",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",103,"^8",7,"^9",103,"^:",28,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"^E","^2E","^6","markdown/transformers.cljc","^:",28,"^6K",["^1F",[["^6T","^71"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",103,"^6O","^76","^9",103,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"~$parse-metadata-line",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",314,"^8",7,"^9",314,"^:",26,"^6H",["^1F",["^6I",["^1F",[["~$line"]]]]],"^7;","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"^E","^2O","^6","markdown/transformers.cljc","^:",26,"^6K",["^1F",[["^7P"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",314,"^6O",["^D",[null,"^76","^6V"]],"^9",314,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^7P"]]]]],"^7;","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"~$blockquote-2",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",283,"^8",7,"^9",283,"^:",19,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["~$blockquote-start","~$blockquote-end","~$blockquote-paragraph","^7H"],"^1H","^71"]]]]]],"^7;","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"^E","^3V","^6","markdown/transformers.cljc","^:",19,"^6K",["^1F",[["^6T","~$p__48663"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",283,"^6O","^76","^9",283,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^7R","^7S","^7T","^7H"],"^1H","^71"]]]]]],"^7;","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"~$empty-line",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",45,"^8",7,"^9",45,"^:",17,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^79","^7:"],"^1H","^71"]]]]]]],"^E","^44","^6","markdown/transformers.cljc","^:",17,"^6K",["^1F",[["^6T","~$p__48626"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",45,"^6O","^76","^9",45,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^79","^7:"],"^1H","^71"]]]]]]],"~$open-paragraph",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",135,"^8",7,"^9",135,"^:",21,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^78","^7=","~$inline-heading","~$temp","^7L","^79","^7H","~$blockquote","^70","~$last-line-empty?"],"^1H","^71"]]]]]]],"^E","^32","^6","markdown/transformers.cljc","^:",21,"^6K",["^1F",[["^6T","~$p__48642"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",135,"^6O","^76","^9",135,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^78","^7=","^7Y","^7Z","^7L","^79","^7H","^7[","^70","^80"],"^1H","^71"]]]]]]],"~$footer",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",300,"^8",7,"^9",300,"^:",13,"^6H",["^1F",["^6I",["^1F",[["~$footnotes"]]]]]],"^E","^45","^6","markdown/transformers.cljc","^:",13,"^6K",["^1F",[["^83"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",300,"^6O","^P","^9",300,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^83"]]]]]],"~$parse-edn-metadata-headers",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",376,"^8",7,"^9",376,"^:",33,"^6H",["^1F",["^6I",["^1F",[["^6J"]]]]]],"^E","^4A","^6","markdown/transformers.cljc","^:",33,"^6K",["^1F",[["^6J"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",376,"^6O","^76","^9",376,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6J"]]]]]],"~$heading?",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",34,"^8",7,"^9",34,"^:",15,"^6H",["^1F",["^6I",["^1F",[["^6T","~$type"]]]]]],"^E","^27","^6","markdown/transformers.cljc","^:",15,"^6K",["^1F",[["^6T","^86"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",34,"^6O",["^D",[null,"^6U","^6V"]],"^9",34,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T","^86"]]]]]],"~$set-line-state",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",121,"^8",7,"^9",121,"^:",21,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^7Y"],"^1H","^71"]]]]]]],"^E","^3C","^6","markdown/transformers.cljc","^:",21,"^6K",["^1F",[["^6T","~$p__48640"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",121,"^6O","^76","^9",121,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^7Y"],"^1H","^71"]]]]]]],"~$clear-line-state",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",127,"^8",7,"^9",127,"^:",23,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"^E","^2L","^6","markdown/transformers.cljc","^:",23,"^6K",["^1F",[["^6T","^71"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",127,"^6O","^76","^9",127,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T","^71"]]]]]],"^79",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",163,"^8",7,"^9",163,"^:",11,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^78","~$indent-code-end","^74","^7H","^79","^7:","^70"],"^1H","^71"]]]]]]],"^E","^3I","^6","markdown/transformers.cljc","^:",11,"^6K",["^1F",[["^6T","~$p__48647"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",163,"^6O","^76","^9",163,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^78","^8:","^74","^7H","^79","^7:","^70"],"^1H","^71"]]]]]]],"~$parse-metadata-headers",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",388,"^8",7,"^9",388,"^:",29,"^6H",["^1F",["^6I",["^1F",[["^6J"]]]]],"^7;","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats.\n   \n  Returns the parsed headers number of lines the metadata spans"],"^E","^3X","^6","markdown/transformers.cljc","^:",29,"^6K",["^1F",[["^6J"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",388,"^6O",["^D",[null,"^76","^6P","^6V"]],"^9",388,"^6Q",1,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6J"]]]]],"^7;","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats.\n   \n  Returns the parsed headers number of lines the metadata spans"],"~$br",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",84,"^8",7,"^9",84,"^:",9,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^79","^7H"],"^1H","^71"]]]]]]],"^E","^3U","^6","markdown/transformers.cljc","^:",9,"^6K",["^1F",[["^6T","~$p__48630"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",84,"^6O","^76","^9",84,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^6T",["^ ","^73",["^79","^7H"],"^1H","^71"]]]]]]],"~$paragraph-text",["^ ","^6G",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",130,"^8",7,"^9",130,"^:",21,"^6H",["^1F",["^6I",["^1F",[["^80","^6T"]]]]]],"^E","^2M","^6","markdown/transformers.cljc","^:",21,"^6K",["^1F",[["^80","^6T"]]],"^6L",null,"^6M",["^1F",[null,null]],"^8",1,"^6N",false,"^7",130,"^6O",["^D",[null,"^P"]],"^9",130,"^6Q",2,"^6R",true,"^6H",["^1F",["^6I",["^1F",[["^80","^6T"]]]]]]],"^1D",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^V",["^D",["~:next-line","~:codeblock","~:indented-code","~:blockquote-paragraph","~:hr","~:temp","~:lists","~:buf","~:blockquote-end","~:clojurescript","~:inline-heading","~:else","~:last-line-empty?","~:default","~:frozen-strings","~:indent-code-end","~:code-style","~:codeblock-end","~:skip-next-line?","~:code","~:blockquote-start","~:processed","~:heading-anchors","~:eof","~:paragraph","~:blockquote","~:heading"]],"~:order",["^8T","^8B","^8E","^8[","^8N","^8H","^8A","^8W","^8L","^8K","^8G","^8O","^8J","^8F","^8X","^8Y","^8Z","^8M","^8P","^8C","^8R","^8S","^8Q","^8I","^8D","^8U","^8V"]],"^1J",["^ ","^W",["^D",[]]],"^1K",["^ "],"^1L",["^N","^L","^Q","^S","^R","^O","^M","^U"]],"^I","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^4E",[["^93","~:static-fns"],true,["^93","~:shadow-tweaks"],null,["^93","~:source-map-inline"],null,["^93","~:elide-asserts"],true,["^93","~:optimize-constants"],null,["^93","^1Q"],null,["^93","~:external-config"],null,["^93","~:tooling-config"],null,["^93","~:emit-constants"],null,["^93","~:load-tests"],false,["^93","~:form-size-threshold"],null,["^93","~:global-goog-object&array"],null,["^93","~:data-readers"],null,["^93","~:infer-externs"],"~:auto",["^93","^1S"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^93","~:fn-invoke-direct"],null,["^93","~:source-map"],null]]]