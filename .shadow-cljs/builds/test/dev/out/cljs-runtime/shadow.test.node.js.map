{"version":3,"sources":["shadow/test/node.cljs"],"mappings":"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","names":["cljs.test/report","m","cljs.test/successful?","js/process.exit","shadow.test.node/reset-test-data!","sugbi.core-test/test-home","shadow.test.env/reset-test-data!","shadow.test.node/parse-args","args","cljs.core.reduce","opts","arg","cljs.core._EQ_","cljs.core.assoc","clojure.string/starts-with?","test-arg","cljs.core.subs","test-syms","clojure.string.split","cljs.core.map","cljs.core/symbol","cljs.core.update","cljs.core/into","cljs.core.println","shadow.test.node/find-matching-test-vars","test-namespaces","cljs.core.filter","cljs.core/simple-symbol?","cljs.core/set","test-var-syms","cljs.core/qualified-symbol?","shadow.test.env/get-test-vars","the-var","map__52082","cljs.core/--destructure-map","cljs.core.get","name","ns","cljs.core/meta","cljs.core/contains?","cljs.core.symbol","p__52083","map__52084","shadow.test.node/execute-cli","help","list","test-env","cljs.test.empty_env","seq__52085","cljs.core/seq","chunk__52086","count__52087","i__52088","vec__52107","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__52116","cljs.core/first","cljs.core/next","ns-info","shadow.test.env/get-tests","cljs.core.sort_by","seq__52110","chunk__52112","count__52113","i__52114","seq__52119","chunk__52121","count__52122","i__52123","var","test-vars","shadow.test.run_test_vars","shadow.test.run_all_tests","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","shadow.test.node/main","seq52125","self__5755__auto__","shadow.test.env/UI-DRIVEN","js/console.log"],"sourcesContent":["(ns shadow.test.node\n  {:dev/always true}\n  (:require\n    [shadow.test.env :as env]\n    [cljs.test :as ct]\n    [shadow.test :as st]\n    [clojure.string :as str]))\n\n;; FIXME: add option to not exit the node process?\n(defmethod ct/report [::ct/default :end-run-tests] [m]\n  (if (ct/successful? m)\n    (js/process.exit 0)\n    (js/process.exit 1)))\n\n;; get-test-data is a macro so this namespace REQUIRES :dev/always hint ns so that it is always recompiled\n(defn ^:dev/after-load reset-test-data! []\n  (-> (env/get-test-data)\n      (env/reset-test-data!)))\n\n(defn parse-args [args]\n  (reduce\n    (fn [opts arg]\n      (cond\n        (= \"--help\" arg)\n        (assoc opts :help true)\n\n        (= \"--list\" arg)\n        (assoc opts :list true)\n\n        (str/starts-with? arg \"--test=\")\n        (let [test-arg (subs arg 7)\n              test-syms\n              (->> (str/split test-arg \",\")\n                   (map symbol))]\n          (update opts :test-syms into test-syms))\n\n        :else\n        (do (println (str \"Unknown arg: \" arg))\n            opts)\n        ))\n    {:test-syms []}\n    args))\n\n(defn find-matching-test-vars [test-syms]\n  ;; FIXME: should have some kind of wildcard support\n  (let [test-namespaces\n        (->> test-syms (filter simple-symbol?) (set))\n        test-var-syms\n        (->> test-syms (filter qualified-symbol?) (set))]\n\n    (->> (env/get-test-vars)\n         (filter (fn [the-var]\n                   (let [{:keys [name ns]} (meta the-var)]\n                     (or (contains? test-namespaces ns)\n                         (contains? test-var-syms (symbol ns name))))))\n         )))\n\n(defn execute-cli [{:keys [test-syms help list] :as opts}]\n  (let [test-env\n        (-> (ct/empty-env)\n            ;; can't think of a proper way to let CLI specify custom reporter?\n            ;; :report-fn is mostly for UI purposes, CLI should be fine with default report\n            #_(assoc :report-fn\n                (fn [m]\n                  (tap> [:test m (ct/get-current-env)])\n                  (prn m))))]\n\n    (cond\n      help\n      (do (println \"Usage:\")\n          (println \"  --list (list known test names)\")\n          (println \"  --test=<ns-to-test>,<fqn-symbol-to-test> (run test for namespace or single var, separated by comma)\"))\n\n      list\n      (doseq [[ns ns-info]\n              (->> (env/get-tests)\n                   (sort-by first))]\n        (println \"Namespace:\" ns)\n        (doseq [var (:vars ns-info)\n                :let [m (meta var)]]\n          (println (str \"  \" (:ns m) \"/\" (:name m))))\n        (println \"---------------------------------\"))\n\n      (seq test-syms)\n      (let [test-vars (find-matching-test-vars test-syms)]\n        (st/run-test-vars test-env test-vars))\n\n      :else\n      (st/run-all-tests test-env nil)\n      )))\n\n(defn main [& args]\n  (reset-test-data!)\n\n  (if env/UI-DRIVEN\n    (js/console.log \"Waiting for UI ...\")\n    (let [opts (parse-args args)]\n      (execute-cli opts))))\n"]}