{"version":3,"sources":["pjstadig/util.cljc"],"mappings":"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","names":["pjstadig.util/print-seq","aseq","cljs.pprint/level-exceeded","cljs.core/-write","cljs.core/*out*","*current-level*-orig-val__55001","cljs.pprint/*current-level*","*current-length*-orig-val__55002","cljs.pprint/*current-length*","*current-level*-temp-val__55003","*current-length*-temp-val__55004","cljs.pprint/start-block","cljs.pprint/end-block","cljs.pprint/write-out","cljs.core/ffirst","pjstadig.print/rprint","cljs.pprint/pprint-newline","cljs.core/fnext","cljs.core/first","pjstadig.util/pprint-record","arec","*current-level*-orig-val__55060","*current-length*-orig-val__55061","*current-level*-temp-val__55062","*current-length*-temp-val__55063","cljs.core/re-find","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__55064","cljs.core/*print-newline*","*print-fn*-orig-val__55065","cljs.core/*print-fn*","*print-newline*-temp-val__55066","*print-fn*-temp-val__55067","x__5691__auto__","cljs.core.print","length-count55070","cljs.core/not","cljs.core/*print-length*","cljs.core/seq","cljs.core/next","p__55102","map__55103","cljs.core/--destructure-map","cljs.core.get","pjstadig.util/report-","type","expected","actual","diffs","message","event","cljs.test/inc-report-counter!","cljs.core.println","cljs.test/testing-vars-str","cljs.test/get-current-env","cljs.test/testing-contexts-str","pjstadig.print/with-pretty-writer","print-expected","cljs.pprint.pprint","pjstadig.print/clear","seq__55115","chunk__55116","count__55117","i__55118","vec__55137","cljs.core.nth","vec__55140","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__55144","vec__55147","a","b","pjstadig.util/define-fail-report","cljs.test/report","pjstadig.print/convert-event"],"sourcesContent":["(ns pjstadig.util\n  #?(:clj (:use [clojure.test]))\n  (:require\n   #?@(:clj  [[clojure.pprint :as pp]\n              [pjstadig.print :as p]]\n       :cljs [[cljs.pprint :as pp :include-macros true]\n              [pjstadig.print :as p]\n              [cljs.test :refer [inc-report-counter! testing-vars-str testing-contexts-str get-current-env]]]))\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n(defn- print-seq [aseq]\n  (pp/pprint-logical-block\n   (pp/write-out (ffirst aseq))\n   (p/rprint \" \")\n   (pp/pprint-newline :linear)\n   ;; [pjs] this is kind of ugly, but it is a private var :(\n   ;; always print both parts of the [k v] pair\n   #?(:clj  (.set #'pp/*current-length* 0)\n      :cljs (set! pp/*current-length* 0))\n   (pp/write-out (fnext (first aseq)))))\n\n\n(defn pprint-record [arec]\n  (pp/pprint-logical-block\n    #?@(:clj  [:prefix (str \"#\" (.getName (class arec)) \"{\") :suffix \"}\"]\n        :cljs [:prefix (re-find #\".*?\\{\" (with-out-str (print arec))) :suffix \"}\"])\n    (pp/print-length-loop\n      [aseq (seq arec)]\n      (when aseq\n        (print-seq aseq)\n        (when (next aseq)\n          (print \", \")\n          (pp/pprint-newline :linear)\n          (recur (next aseq)))))))\n\n(defn- report-\n    [{:keys [type expected actual diffs message] :as event}]\n      #?(:clj  (inc-report-counter :fail)\n         :cljs (inc-report-counter! :fail))\n      (println \"\\nFAIL in\" (testing-vars-str event))\n      (when #?(:clj  (seq *testing-contexts*)\n               :cljs (:testing-contexts (get-current-env)))\n            (println (testing-contexts-str)))\n      (when message (println message))\n  (p/with-pretty-writer (fn []\n                          (let [print-expected (fn [actual]\n                                                 (p/rprint \"expected: \")\n                                                 (pp/pprint expected *out*)\n                                                 (p/rprint \"  actual: \")\n                                                 (pp/pprint actual *out*)\n                                                 (p/clear))]\n                            (if (seq diffs)\n                              (doseq [[actual [a b]] diffs]\n                                (print-expected actual)\n                                (when (and (some? expected) (some? actual))\n                                  (do\n                                    (p/rprint \"    diff:\")\n                                    (if a\n                                      (do (p/rprint \" - \")\n                                          (pp/pprint a *out*)\n                                          (p/rprint \"          + \"))\n                                      (p/rprint \" + \"))\n                                    (when b\n                                      (pp/pprint b *out*))\n                                    (p/clear))))\n                              (print-expected actual))))))\n\n(defn define-fail-report []\n  #?(:clj (defmethod report :fail [& args]\n            (with-test-out\n            (report- (first args))))\n    :cljs (defmethod cljs.test/report [:cljs.test/default :fail]\n            [event]\n            (report- (p/convert-event event)))))\n"]}