{"version":3,"sources":["sugbi/ajax.cljs"],"mappings":";AAOA,8BAAA,sCAAAA,pEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAA0BI;AAA1B,AACE,OAACC,cAAI,kBAAA,lBAACC,+BAAoBF;;AAE5B,6BAAA,7BAAMG,kEAAiBC;AAAvB,AACE,GAAI,AAACL,4BAAWK;sDACVA,tDACA,8DAAA,2DAAA,WAAAC,7HAACC;AAAD,AAAkB,8GAAA,2CAAA,iCAAAD,nLAACE,iKAAsBC;;;AAC7CJ;;;AAIJ,wBAAA,xBAAMK,wDAAYC;AAAlB,AACE,8GAAA,2CAAA,lJAACH,4MAAwB,iBAAAI,WAAA,2CAAA,yDACW,uDAAA,vDAACE,4GAAqBC;AADjC,AAAA,wIAAAH,uDAAAA,vLAACC,iEAAAA,2EAAAA;KAA1B,2EAEyB,iBAAAG,WAAA,2CAAA,wDACW,uDAAA,vDAACE,4GAAqBC;AADjC,AAAA,0IAAAH,wDAAAA,1LAACC,kEAAAA,4EAAAA;aAEnBN;;AAET,qCAAA,rCAAMS;AAAN,AACE,OAACC,mDAAMC,+BACAC,eACA,iBAAAC,WAAA,2CAAA,qDAAA,kBAAA,2DAC+BpB;AAD/B,AAAA,wHAAAoB,+CAAAA,/JAACC,yDAAAA,mEAAAA","names":["p__59393","map__59400","cljs.core/--destructure-map","cljs.core.get","sugbi.ajax/local-uri?","uri","cljs.core/not","cljs.core/re-find","sugbi.ajax/default-headers","request","p1__59419#","cljs.core.update","cljs.core.merge","js/csrfToken","sugbi.ajax/as-transit","opts","G__59420","ajax.core/transit-request-format","cognitect.transit.writer","luminus-transit.time/time-serialization-handlers","G__59421","ajax.core/transit-response-format","cognitect.transit.reader","luminus-transit.time/time-deserialization-handlers","sugbi.ajax/load-interceptors!","cljs.core.swap_BANG_","ajax.core/default-interceptors","cljs.core/conj","G__59431","ajax.core/to-interceptor"],"sourcesContent":["(ns sugbi.ajax\n  (:require\n    [ajax.core :as ajax]\n    [luminus-transit.time :as time]\n    [cognitect.transit :as transit]\n    [re-frame.core :as rf]))\n\n(defn local-uri? [{:keys [uri]}]\n  (not (re-find #\"^\\w+?://\" uri)))\n\n(defn default-headers [request]\n  (if (local-uri? request)\n    (-> request\n        (update :headers #(merge {\"x-csrf-token\" js/csrfToken} %)))\n    request))\n\n;; injects transit serialization config into request options\n\n(defn as-transit [opts]\n  (merge {:format          (ajax/transit-request-format\n                             {:writer (transit/writer :json time/time-serialization-handlers)})\n          :response-format (ajax/transit-response-format\n                             {:reader (transit/reader :json time/time-deserialization-handlers)})}\n         opts))\n\n(defn load-interceptors! []\n  (swap! ajax/default-interceptors\n         conj\n         (ajax/to-interceptor {:name \"default headers\"\n                               :request default-headers})))\n"]}