{"version":3,"sources":["pjstadig/print.cljs"],"mappings":";AAMA,GAAA,QAAAA,qCAAAC,2CAAAC;AAAA;AAAA,AAAA,AAAmBC,oBAAG,KAAAC;;AAEtB,wBAAA,xBAAMC,wDAAQC;AAAd,AACE,OAACC,iBAAiBC,0BAAMF;;AAE1B,uBAAA,vBAAMG;AAAN,AACE,AAACC,yCAAW,AAAWP;;AACvB,OAAQA;;AAEV,oCAAA,pCAAMQ,gFAAoBC;AAA1B,AACE,IAAAC,kCAAUL;IAAVM,kCAAgB,AAACC,8BAAqB,KAAAC,6BAAqBb;AAA3D,AAAA,6BAAAW,5BAAUN;;AAAV,IAAA,AACE,QAACI,kCAAAA,oCAAAA;UADH,AAAA,6BAAAC,5BAAUL;;AAGZ,+BAAA,uCAAAS,tEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAkDM;aAAlD,AAAAJ,4CAAAF,eAAA,pEAA6BI;eAA7B,AAAAF,4CAAAF,eAAA,tEAAoCK;AAApC,AACE,IAAME,QAAM,kBAAM,iBAAAC,oBAAK,AAACC,qBAAKL;AAAX,AAAA,GAAAI;AAAA,IAAAA,wBACK,AAACE,cAAIN;AADV,AAAA,GAAAI;AAAA,IAAAA,wBAEK,6CAAA,AAAA,7CAACG,oGAAO,AAACC,gBAAMR;AAFpB,AAAA,GAAAI;AAAA,IAAAA,wBAGK,AAACC,qBAAK,AAACI,iBAAOT;AAHnB,AAAA,GAAAI;AAAA,IAAAA,wBAIK,AAACE,cAAI,AAACG,iBAAOT;AAJlB,AAAA,GAAAI;AAAA,IAAAA,wBAKK,iBAAAM,WAAoC,AAACF,gBAAM,AAACC,iBAAOT;IAAnDW,eAAA,iFAAA,AAAA,gFAAA,AAAA,0EAAA,AAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AALL,AAAA,oBAAAN;AAMK,QAAA,MAAK,AAACQ,gBAAM,AAACH,iBAAOT;;AANzBI;;;AAAAA;;;AAAAA;;;AAAAA;;;AAAAA;;;AAAAA;;MAAN,AAOE,iBAAMS,IAAE,qEAAA,rEAACC,4CAAI,AAACL,iBAAOT;IACfe,OAAK,6CAAA,7CAACC,iDAAO,AAACP,iBAAOT;AAD3B,AAEE,OAACiB,4CAAIC,iBACAH,KACA,4CAAA,WAAAI,vDAACF;AAAD,AAAM,oDAAA,7CAACG,iDAAO,6GAAAD,7GAACE,2GAAOR;GAAME;KAXrC;IAYNd,eAAS,EAAI,AAACK,cAAIH,QACP,qEAAA,rEAACW,4CAAI,AAACL,iBAAOT,aACbC;AAdjB,AAeE,kEAAA,gHAAA,3KAACqB,qDAAMpB,8DACOC,qHACGF","names":["js/pjstadig","js/pjstadig.print","js/pjstadig.print.sb","pjstadig.print/sb","js/goog.string.StringBuffer","pjstadig.print/rprint","s","cljs.core/-write","cljs.core/*out*","pjstadig.print/clear","cljs.core/*print-fn*","pjstadig.print/with-pretty-writer","f","*out*-orig-val__54843","*out*-temp-val__54844","cljs.pprint/get-pretty-writer","cljs.core/StringBufferWriter","p__54846","map__54847","cljs.core/--destructure-map","cljs.core.get","pjstadig.print/convert-event","actual","expected","event","diffs","and__5043__auto__","cljs.core/seq?","cljs.core/seq","cljs.core._EQ_","cljs.core/first","cljs.core/second","G__54865","fexpr__54864","cljs.core/count","a","cljs.core.nth","more","cljs.core.drop","cljs.core.map","cljs.core/vector","p1__54845#","cljs.core.take","pjstadig.macro.diff","cljs.core.assoc"],"sourcesContent":["(ns pjstadig.print\n  (:require [cljs.pprint :as pp :include-macros true]\n            [pjstadig.macro :as m])\n  (:import [goog.string StringBuffer]))\n\n;; fix #37 - https://github.com/pjstadig/humane-test-output/issues/37\n(defonce ^:private sb (StringBuffer.))\n\n(defn rprint [s]\n  (cljs.core/-write *out* s))\n\n(defn clear []\n  (*print-fn* (.toString sb))\n  (.clear sb))\n\n(defn with-pretty-writer [f]\n  (binding [*out* (pp/get-pretty-writer (StringBufferWriter. sb))]\n    (f)))\n\n(defn convert-event [{:keys [actual expected] :as event}]\n  (let [diffs (when (and (seq? actual)\n                         (seq actual)\n                         (= 'not (first actual))\n                         (seq? (second actual))\n                         (seq (second actual))\n                         (#{'clojure.core/= '= 'cljs.core/=} (first (second actual)))\n                         (< 2 (count (second actual))))\n                (let [a (nth (second actual) 1)\n                      more (drop 2 (second actual))]\n                  (map vector\n                       more\n                       (map #(take 2 (m/diff a %)) more))))\n        expected (if (seq diffs)\n                   (nth (second actual) 1)\n                   expected)]\n    (assoc event\n           :diffs diffs\n           :expected expected)))\n"]}