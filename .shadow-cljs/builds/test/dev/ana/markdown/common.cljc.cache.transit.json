["^ ","~:output",["^ ","~:js","goog.provide('markdown.common');\nmarkdown.common._STAR_inhibit_separator_STAR_ = null;\nmarkdown.common.escape_delimiter = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((254))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((491)))].join('');\nmarkdown.common.gen_token = (function markdown$common$gen_token(n){\nreturn [markdown.common.escape_delimiter,cljs.core.str.cljs$core$IFn$_invoke$arity$1(n),markdown.common.escape_delimiter].join('');\n});\n/**\n * Freezes an output string.  Converts to a placeholder token and puts that into the output.\n *   Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n *   So that it can be unfrozen later.\n */\nmarkdown.common.freeze_string = (function markdown$common$freeze_string(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___57625 = arguments.length;\nvar i__5770__auto___57626 = (0);\nwhile(true){\nif((i__5770__auto___57626 < len__5769__auto___57625)){\nargs__5775__auto__.push((arguments[i__5770__auto___57626]));\n\nvar G__57627 = (i__5770__auto___57626 + (1));\ni__5770__auto___57626 = G__57627;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar state = cljs.core.last(args);\nvar token = markdown.common.gen_token(cljs.core.count(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state)));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token,cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),token], null),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.flatten(cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(args))))], null);\n}));\n\n(markdown.common.freeze_string.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(markdown.common.freeze_string.cljs$lang$applyTo = (function (seq57589){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq57589));\n}));\n\n/**\n * Recursively replaces the frozen strings in the output with the original text.\n */\nmarkdown.common.thaw_string = (function markdown$common$thaw_string(text,state){\nwhile(true){\nvar temp__5802__auto__ = cljs.core.re_seq(cljs.core.re_pattern([markdown.common.escape_delimiter,\"\\\\d+\",markdown.common.escape_delimiter].join('')),text);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar matches = temp__5802__auto__;\nvar G__57631 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (text,state,matches,temp__5802__auto__){\nreturn (function (s,r){\nreturn clojure.string.replace(s,cljs.core.re_pattern(r),((function (text,state,matches,temp__5802__auto__){\nreturn (function (p1__57590_SHARP_){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state),p1__57590_SHARP_,p1__57590_SHARP_);\n});})(text,state,matches,temp__5802__auto__))\n);\n});})(text,state,matches,temp__5802__auto__))\n,text,matches);\nvar G__57632 = cljs.core.update.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),((function (text,state,matches,temp__5802__auto__){\nreturn (function (p1__57591_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,p1__57591_SHARP_,matches);\n});})(text,state,matches,temp__5802__auto__))\n);\ntext = G__57631;\nstate = G__57632;\ncontinue;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\nbreak;\n}\n});\n/**\n * Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\n */\nmarkdown.common.thaw_strings = (function markdown$common$thaw_strings(text,state){\nif((!(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state))))){\nreturn markdown.common.thaw_string(text,state);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n});\nmarkdown.common.escape_code = (function markdown$common$escape_code(s){\nreturn clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(s,/&/,\"&amp;\"),/\\*/,\"&#42;\"),/\\^/,\"&#94;\"),/\\_/,\"&#95;\"),/\\~/,\"&#126;\"),/\\</,\"&lt;\"),/\\>/,\"&gt;\"),/\\[/,\"&#91;\"),/\\]/,\"&#93;\"),/\\(/,\"&#40;\"),/\\)/,\"&#41;\"),/\\\"/,\"&quot;\");\n});\nmarkdown.common.escaped_chars = (function markdown$common$escaped_chars(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\n}\n})())?text:clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/\\\\\\\\/,\"&#92;\"),/\\\\`/,\"&#8216;\"),/\\\\\\*/,\"&#42;\"),/\\\\_/,\"&#95;\"),/\\\\\\{/,\"&#123;\"),/\\\\\\}/,\"&#125;\"),/\\\\\\[/,\"&#91;\"),/\\\\\\]/,\"&#93;\"),/\\\\\\(/,\"&#40;\"),/\\\\\\)/,\"&#41;\"),/\\\\#/,\"&#35;\"),/\\\\\\+/,\"&#43;\"),/\\\\-/,\"&#45;\"),/\\\\\\./,\"&#46;\"),/\\\\!/,\"&#33;\"),/\\\\\\^/,\"&#94;\")),state], null);\n});\nmarkdown.common.open_html_tags = (function markdown$common$open_html_tags(open_QMARK_,token_seq){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"open\",\"open\",-1763596448),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (state,token){\nvar G__57592 = token;\nswitch (G__57592) {\ncase \"<\":\nreturn new cljs.core.Keyword(null,\"open\",\"open\",-1763596448);\n\nbreak;\ncase \">\":\nreturn new cljs.core.Keyword(null,\"closed\",\"closed\",-919675359);\n\nbreak;\ndefault:\nreturn state;\n\n}\n}),(cljs.core.truth_(open_QMARK_)?new cljs.core.Keyword(null,\"open\",\"open\",-1763596448):new cljs.core.Keyword(null,\"closed\",\"closed\",-919675359)),token_seq));\n});\n/**\n * Return a transformer to\n * - find all the chunks of the string delimited by the `separator',\n * - wrap the output with the `open' and `close' markers, and\n * - apply the `transformer' to the text inside the chunk.\n */\nmarkdown.common.make_separator = (function markdown$common$make_separator(var_args){\nvar G__57595 = arguments.length;\nswitch (G__57595) {\ncase 3:\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3 = (function (separator,open,close){\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,cljs.core.identity);\n}));\n\n(markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4 = (function (separator,open,close,transformer){\nvar separator__$1 = cljs.core.seq(separator);\nreturn (function (text,state){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar out = cljs.core.PersistentVector.EMPTY;\nvar buf = cljs.core.PersistentVector.EMPTY;\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,cljs.core.first(separator__$1)),cljs.core.seq(text));\nvar cur_state = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911),false], 0));\nwhile(true){\nif(cljs.core.empty_QMARK_(tokens)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.into.cljs$core$IFn$_invoke$arity$2((cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,separator__$1):out),buf)),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576))], null);\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)){\nvar vec__57610 = (((transformer === cljs.core.identity))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [buf,cur_state], null):(function (){var vec__57614 = (function (){var G__57617 = clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf);\nvar G__57618 = cur_state;\nreturn (transformer.cljs$core$IFn$_invoke$arity$2 ? transformer.cljs$core$IFn$_invoke$arity$2(G__57617,G__57618) : transformer.call(null,G__57617,G__57618));\n})();\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57614,(0),null);\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57614,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq(s),new_state], null);\n})());\nvar new_buf = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57610,(0),null);\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57610,(1),null);\nvar G__57643 = cljs.core.vec(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.seq(open),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new_buf,cljs.core.seq(close)], 0)));\nvar G__57644 = cljs.core.PersistentVector.EMPTY;\nvar G__57645 = cljs.core.rest(tokens);\nvar G__57646 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false);\nout = G__57643;\nbuf = G__57644;\ntokens = G__57645;\ncur_state = G__57646;\ncontinue;\n} else {\nvar G__57647 = out;\nvar G__57648 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(tokens));\nvar G__57649 = cljs.core.rest(tokens);\nvar G__57650 = cur_state;\nout = G__57647;\nbuf = G__57648;\ntokens = G__57649;\ncur_state = G__57650;\ncontinue;\n}\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)) && (cljs.core.not(new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911).cljs$core$IFn$_invoke$arity$1(cur_state))))){\nvar G__57651 = out;\nvar G__57652 = buf;\nvar G__57653 = cljs.core.rest(tokens);\nvar G__57654 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),true);\nout = G__57651;\nbuf = G__57652;\ntokens = G__57653;\ncur_state = G__57654;\ncontinue;\n} else {\nvar G__57656 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(tokens));\nvar G__57657 = buf;\nvar G__57658 = cljs.core.rest(tokens);\nvar G__57659 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cur_state,new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911),markdown.common.open_html_tags(new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911).cljs$core$IFn$_invoke$arity$1(cur_state),cljs.core.first(tokens)));\nout = G__57656;\nbuf = G__57657;\ntokens = G__57658;\ncur_state = G__57659;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n}\n});\n}));\n\n(markdown.common.make_separator.cljs$lang$maxFixedArity = 4);\n\nmarkdown.common.escape_code_transformer = (function markdown$common$escape_code_transformer(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.escape_code(text),state], null);\n});\nmarkdown.common.separator = (function markdown$common$separator(escape_QMARK_,text,open,close,separator,state){\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,(cljs.core.truth_(escape_QMARK_)?markdown.common.escape_code_transformer:cljs.core.identity))(text,state);\n});\nmarkdown.common.strong = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"**\",\"<strong>\",\"</strong>\");\nmarkdown.common.bold_italic = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"***\",\"<b><i>\",\"</i></b>\");\nmarkdown.common.bold = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"__\",\"<b>\",\"</b>\");\nmarkdown.common.em = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"*\",\"<em>\",\"</em>\");\nmarkdown.common.italics = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"_\",\"<i>\",\"</i>\");\nmarkdown.common.strikethrough = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"~~\",\"<del>\",\"</del>\");\nmarkdown.common.inline_code = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(\"`\",\"<code>\",\"</code>\",markdown.common.escape_code_transformer);\nmarkdown.common.inhibit = (function markdown$common$inhibit(text,state){\nif(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)){\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(markdown.common._STAR_inhibit_separator_STAR_,\"\",\"\",markdown.common.freeze_string)(text,state);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n});\nmarkdown.common.escape_inhibit_separator = (function markdown$common$escape_inhibit_separator(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)?clojure.string.replace(text,clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(markdown.common._STAR_inhibit_separator_STAR_,markdown.common._STAR_inhibit_separator_STAR_)),clojure.string.join.cljs$core$IFn$_invoke$arity$1(markdown.common._STAR_inhibit_separator_STAR_)):text),state], null);\n});\nmarkdown.common.heading_text = (function markdown$common$heading_text(text){\nreturn clojure.string.trim(clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/^([ ]+)?[#]+/,\"\"),/[#]+$/,\"\"),/\\{(#|id=)?.*\\}$/,\"\"));\n});\n/**\n * Extract Hugo markdown anchor links from the `text`.\n * \n *   See: https://gohugo.io/content-management/cross-references/#heading-ids\n */\nmarkdown.common.hugo_anchor = (function markdown$common$hugo_anchor(text){\nvar temp__5804__auto__ = cljs.core.seq(cljs.core.re_find(/\\{(#|id=)?(.*)\\}$/,text));\nif(temp__5804__auto__){\nvar groups = temp__5804__auto__;\nreturn cljs.core.last(groups);\n} else {\nreturn null;\n}\n});\nmarkdown.common.heading_level = (function markdown$common$heading_level(text){\nvar num_hashes = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__57619_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__57619_SHARP_);\n}),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__57620_SHARP_){\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"#\",p1__57620_SHARP_)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__57620_SHARP_)));\n}),cljs.core.seq(text))));\nif((num_hashes > (0))){\nreturn num_hashes;\n} else {\nreturn null;\n}\n});\nmarkdown.common.make_heading = (function markdown$common$make_heading(text,heading_anchors){\nvar temp__5804__auto__ = markdown.common.heading_level(text);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar heading = temp__5804__auto__;\nvar htext = markdown.common.heading_text(text);\nvar anchor = (cljs.core.truth_(heading_anchors)?(function (){var or__5045__auto__ = markdown.common.hugo_anchor(text);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn clojure.string.replace(clojure.string.lower_case(htext),\" \",\"&#95;\");\n}\n})():null);\nreturn [\"<h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),(cljs.core.truth_(anchor)?[\" id=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(anchor),\"\\\"\"].join(''):null),\">\",htext,\"</h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),\">\"].join('');\n} else {\nreturn null;\n}\n});\nmarkdown.common.dashes = (function markdown$common$dashes(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\n}\n})())?text:clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/\\-\\-\\-/,\"&mdash;\"),/\\-\\-/,\"&ndash;\"),/<code>.*<\\/code>/,(function (s){\nreturn clojure.string.replace(clojure.string.replace(s,/&mdash;/,\"---\"),/&ndash;/,\"--\");\n}))),state], null);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/common.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$shadow.js.shim.module$react","~$react-dom","~$shadow.js.shim.module$react_dom"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.common","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^L","~$string","^L","~$cljs.core","^N","~$goog","^O"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^F",["^U",["^Q",["^L","~:as","^M"]]]]],"~:flags",["^ ","^Q",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^L"]],"^I","^F","~:resource-id",["~:shadow.build.classpath/resource","markdown/common.cljc"],"~:compiled-at",1681908588892,"^G",["^ ","^L","^L","^M","^L","^N","^N","^O","^O"],"~:resource-name","markdown/common.cljc","~:warnings",[],"~:source","(ns markdown.common\n  (:require [clojure.string :as string]))\n\n(def ^{:dynamic true} *substring*)\n\n(def ^:dynamic *inhibit-separator* nil)\n\n(def escape-delimiter (str (char 254) (char 491)))\n\n(defn gen-token [n]\n  (str escape-delimiter n escape-delimiter))\n\n(defn freeze-string\n  \"Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.\"\n  [& args]\n  (let [state (last args)\n        token (gen-token (count (:frozen-strings state)))]\n    [token (assoc-in state\n                     [:frozen-strings token]\n                     (reduce str (flatten (drop-last args))))]))\n\n(defn thaw-string\n  \"Recursively replaces the frozen strings in the output with the original text.\"\n  [text state]\n  (if-let [matches (re-seq (re-pattern (str escape-delimiter \"\\\\d+\" escape-delimiter)) text)]\n    (recur\n      (reduce\n        (fn [s r]\n          (string/replace s (re-pattern r) #(get (:frozen-strings state) % %)))\n        text matches)\n      (update state :frozen-strings #(apply dissoc % matches)))\n    [text state]))\n\n(defn thaw-strings\n  \"Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\"\n  [text state]\n  (if-not (empty? (:frozen-strings state))\n    (thaw-string text state)\n    [text state]))\n\n(defn escape-code [s]\n  (-> s\n      (string/replace #\"&\" \"&amp;\")\n      (string/replace #\"\\*\" \"&#42;\")\n      (string/replace #\"\\^\" \"&#94;\")\n      (string/replace #\"\\_\" \"&#95;\")\n      (string/replace #\"\\~\" \"&#126;\")\n      (string/replace #\"\\<\" \"&lt;\")\n      (string/replace #\"\\>\" \"&gt;\")\n      ;(string/replace #\"\\/\" \"&frasl;\") ;screws up ClojureScript compiling\n      (string/replace #\"\\[\" \"&#91;\")\n      (string/replace #\"\\]\" \"&#93;\")\n      (string/replace #\"\\(\" \"&#40;\")\n      (string/replace #\"\\)\" \"&#41;\")\n      (string/replace #\"\\\"\" \"&quot;\")))\n\n(defn escaped-chars [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\\\\\\\\" \"&#92;\")\n         (string/replace #\"\\\\`\" \"&#8216;\")\n         (string/replace #\"\\\\\\*\" \"&#42;\")\n         (string/replace #\"\\\\_\" \"&#95;\")\n         (string/replace #\"\\\\\\{\" \"&#123;\")\n         (string/replace #\"\\\\\\}\" \"&#125;\")\n         (string/replace #\"\\\\\\[\" \"&#91;\")\n         (string/replace #\"\\\\\\]\" \"&#93;\")\n         (string/replace #\"\\\\\\(\" \"&#40;\")\n         (string/replace #\"\\\\\\)\" \"&#41;\")\n         (string/replace #\"\\\\#\" \"&#35;\")\n         (string/replace #\"\\\\\\+\" \"&#43;\")\n         (string/replace #\"\\\\-\" \"&#45;\")\n         (string/replace #\"\\\\\\.\" \"&#46;\")\n         (string/replace #\"\\\\!\" \"&#33;\")\n         (string/replace #\"\\\\\\^\" \"&#94;\")))\n   state])\n\n(defn open-html-tags [open? token-seq]\n  (= :open (reduce (fn [state token]\n                     (case token\n                       \\< :open\n                       \\> :closed\n                       state))\n                   (if open? :open :closed)\n                   token-seq)))\n\n(defn make-separator\n  \"Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.\"\n  ([separator open close]\n   (make-separator separator open close identity))\n  ([separator open close transformer]\n   (let [separator (seq separator)]  ;; allow char seq or string\n     (fn [text state]\n       (if (:code state)\n         [text state]\n         (loop [out       []\n                buf       []\n                tokens    (partition-by (partial = (first separator)) (seq text))\n                cur-state (assoc state :found-token false :in-tag? false)]\n           (cond\n             (empty? tokens)\n             [(string/join (into (if (:found-token cur-state) (into out separator) out) buf))\n              (dissoc cur-state :found-token)]\n\n             (:found-token cur-state)\n             (if (= (first tokens) separator)\n               (let [[new-buf new-state]\n                     (if (identical? transformer identity)\n                       ;; Skip the buf->string->buf conversions in the common\n                       ;; case.\n                       [buf cur-state]\n                       (let [[s new-state] (transformer (string/join buf) cur-state)]\n                         [(seq s) new-state]))]\n                 (recur (vec (concat out (seq open) new-buf (seq close)))\n                        []\n                        (rest tokens)\n                        (assoc new-state :found-token false)))\n               (recur out\n                      (into buf (first tokens))\n                      (rest tokens)\n                      cur-state))\n\n             (and (= (first tokens) separator) (not (:in-tag? cur-state)))\n             (recur out buf (rest tokens) (assoc cur-state :found-token true))\n\n             :default\n             (recur (into out (first tokens)) buf (rest tokens) (assoc cur-state :in-tag? (open-html-tags (:in-tag? cur-state) (first tokens)))))))))))\n\n(defn escape-code-transformer [text state]\n  [(escape-code text) state])\n\n;; Not used any more internally; kept around just in case third party code\n;; depends on this.\n(defn separator [escape? text open close separator state]\n  ((make-separator separator open close (if escape? escape-code-transformer identity))\n   text state))\n\n(def strong (make-separator \"**\" \"<strong>\" \"</strong>\"))\n\n(def bold-italic (make-separator \"***\" \"<b><i>\" \"</i></b>\"))\n\n(def bold (make-separator \"__\" \"<b>\" \"</b>\"))\n\n(def em (make-separator \"*\" \"<em>\" \"</em>\"))\n\n(def italics (make-separator \"_\" \"<i>\" \"</i>\"))\n\n(def strikethrough (make-separator \"~~\" \"<del>\" \"</del>\"))\n\n(def inline-code (make-separator \"`\" \"<code>\" \"</code>\" escape-code-transformer))\n\n(defn inhibit [text state]\n  (if *inhibit-separator*\n    ((make-separator *inhibit-separator* \"\" \"\" freeze-string)\n     text state)\n    [text state]))\n\n(defn escape-inhibit-separator [text state]\n  [(if *inhibit-separator*\n     (string/replace text\n                     (string/join (concat *inhibit-separator* *inhibit-separator*))\n                     (string/join *inhibit-separator*))\n     text)\n   state])\n\n(defn heading-text [text]\n  (-> (clojure.string/replace text #\"^([ ]+)?[#]+\" \"\")\n      (clojure.string/replace #\"[#]+$\" \"\")\n      ;; Strip out Hugo style anchor links\n      (clojure.string/replace #\"\\{(#|id=)?.*\\}$\" \"\")\n      string/trim))\n\n(defn hugo-anchor\n  \"Extract Hugo markdown anchor links from the `text`.\n\n  See: https://gohugo.io/content-management/cross-references/#heading-ids\"\n  [text]\n  (when-let [groups (seq (re-find #\"\\{(#|id=)?(.*)\\}$\" text))]\n    (last groups)))\n\n(defn heading-level [text]\n  (let [num-hashes (count (filter #(not= \\space %) (take-while #(or (= \\# %) (= \\space %)) (seq text))))]\n    (when (pos? num-hashes) num-hashes)))\n\n(defn make-heading [text heading-anchors]\n  (when-let [heading (heading-level text)]\n    (let [htext (heading-text text)\n          anchor (when heading-anchors\n                   (or (hugo-anchor text)\n                       (-> htext string/lower-case (string/replace \" \" \"&#95;\"))))]\n      ;; We do not need to process the id string, HTML5 ids can contain anything except the space character.\n      ;; (https://www.w3.org/TR/html5/dom.html#the-id-attribute)\n      (str \"<h\" heading (when anchor (str \" id=\\\"\" anchor \"\\\"\")) \">\"\n           htext \"</h\" heading \">\"))))\n\n(defn dashes [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\-\\-\\-\" \"&mdash;\")\n         (string/replace #\"\\-\\-\" \"&ndash;\")\n         (string/replace #\"<code>.*</code>\"\n                         (fn [s](-> s\n                                    (string/replace #\"&mdash;\" \"---\")\n                                    (string/replace #\"&ndash;\" \"--\"))))))\n   state])\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.common/*inhibit-separator*","markdown.common/escape-delimiter","cljs.core/char","markdown.common/gen-token","n","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","markdown.common/freeze-string","seq57589","self__5755__auto__","cljs.core/seq","args","state","cljs.core/last","token","cljs.core/count","cljs.core/assoc-in","cljs.core.reduce","cljs.core/str","cljs.core/flatten","cljs.core.drop_last","markdown.common/thaw-string","text","temp__5802__auto__","matches","cljs.core/re-seq","cljs.core/re-pattern","s","r","p1__57590#","clojure.string/replace","cljs.core.get","p1__57591#","cljs.core.update","cljs.core.apply","cljs.core/dissoc","markdown.common/thaw-strings","cljs.core/empty?","markdown.common/escape-code","markdown.common/escaped-chars","or__5045__auto__","markdown.common/open-html-tags","open?","token-seq","cljs.core._EQ_","G__57592","G__57595","markdown.common/make-separator","js/Error","separator","open","close","markdown.common.make_separator","cljs.core/identity","transformer","out","buf","tokens","cljs.core.partition_by","cljs.core.partial","cljs.core/=","cljs.core/first","cur-state","cljs.core.assoc","clojure.string.join","cljs.core.into","cljs.core.dissoc","vec__57610","cljs.core.nth","new-buf","new-state","vec__57614","G__57617","G__57618","cljs.core/vec","cljs.core.concat","cljs.core/rest","cljs.core/not","markdown.common/escape-code-transformer","markdown.common/separator","escape?","markdown.common/strong","markdown.common/bold-italic","markdown.common/bold","markdown.common/em","markdown.common/italics","markdown.common/strikethrough","markdown.common/inline-code","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/heading-text","clojure.string/trim","markdown.common/hugo-anchor","temp__5804__auto__","groups","cljs.core/re-find","markdown.common/heading-level","num-hashes","p1__57619#","cljs.core.filter","cljs.core.not_EQ_","p1__57620#","cljs.core.take_while","markdown.common/make-heading","heading-anchors","heading","htext","anchor","clojure.string/lower-case","markdown.common/dashes"]],"~:used-vars",["^D",["~$cljs.core/char","~$clojure.string/join","~$cljs.core/rest","~$markdown.common/bold-italic","~$cljs.core/str","~$cljs.core/re-seq","~$markdown.common/freeze-string","~$markdown.common/hugo-anchor","~$markdown.common/escaped-chars","~$cljs.core/filter","~$cljs.core/=","~$markdown.common/thaw-string","~$markdown.common/escape-code","~$cljs.core/partial","~$cljs.core/take-while","~$markdown.common/escape-code-transformer","~$cljs.core/IndexedSeq","~$markdown.common/*inhibit-separator*","~$markdown.common/bold","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/identity","~$markdown.common/escape-inhibit-separator","~$cljs.core/last","~$cljs.core/not=","~$cljs.core/dissoc","~$cljs.core/concat","~$markdown.common/em","~$cljs.core/empty?","~$markdown.common/strikethrough","~$markdown.common/heading-level","~$cljs.core/into","~$cljs.core/re-pattern","~$cljs.core/update","~$markdown.common/thaw-strings","~$markdown.common/dashes","~$markdown.common/escape-delimiter","~$markdown.common/inhibit","~$markdown.common/make-separator","~$cljs.core/get","~$markdown.common/heading-text","~$cljs.core/flatten","~$cljs.core/partition-by","~$cljs.core/drop-last","~$markdown.common/gen-token","~$cljs.core/re-find","~$markdown.common/strong","~$cljs.core/nth","~$clojure.string/replace","~$markdown.common/italics","~$markdown.common/inline-code","~$clojure.string/lower-case","~$cljs.core/vec","~$markdown.common/separator","~$markdown.common/open-html-tags","~$cljs.core/not","~$cljs.core/assoc","~$cljs.core/assoc-in","~$clojure.string/trim","~$markdown.common/make-heading","~$cljs.core/first","~$markdown.common/*substring*","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^10","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^O","~$goog.dom.HtmlElement"]]],["^10","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^10","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2["]]],["^10","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30"]]],["^10","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","markdown/common.cljc"],["95872a137eeb74530d57f95449afb63075cb4ef3","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^N","^L"]]],["^10","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30"]]],"~:SHADOW-TIMESTAMP",[1681908370000,1681908370000,1681908362000],["^10","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30","~$goog.reflect"]]],["^10","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30","~$goog.fs.blob","^31","~$goog.html.SafeScript","~$goog.html.trustedtypes","^33","^34","^35","^36"]]],["^10","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^35","~$goog.html.SafeUrl","^36","^30","^2["]]],["^10","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3:","~$goog.html.SafeStyle","^3<","^32","~$goog.html.uncheckedconversions","^35","^2["]]],["^10","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^35","^33","^34","^3:","^3@","~$goog.html.SafeStyleSheet","^3<","~$goog.dom.TagName","^32","^36","^30","~$goog.labs.userAgent.browser","^2X","^2Y","^2[","~$goog.dom.tags","^3;"]]],["^10","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^2Y"]]],["^10","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^10","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^2X","^30","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^10","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",[]]],["^10","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^2X","^2Y"]]],["^10","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^N","^3I","~$goog.string.StringBuffer"]]],["^10","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","~$goog.dom.safe","^3A","^35","^2["]]],["^10","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","~$goog.labs.userAgent","^2["]]],["^10","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30","^3?","^3:","^3@","^3B","^3<","^32","^35","^2[","^33"]]],["^10","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O"]]],["^10","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","~$goog.math.Long","~$goog.math.Integer","^3I","^2Y","^2X","~$goog.Uri","^3N"]]],["^10","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^35","^36","^3;","^30"]]],["^10","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^35","^3@","^36","^2Y","^30","^2["]]],["^10","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^38"]]],["^10","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30","^3I"]]],["^10","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2S",["^ ","^2T",null,"^2U",["^D",[]],"^2V",["^O","^30","^36"]]]]],"~:clj-info",["^ ","jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1681908361000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1681908362000,"jar:file:/home/janet1204/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1681908362000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/common.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^G",["^ "],"^J",null,"^K",["^ ","^L","^L","^M","^L","^N","^N","^O","^O"],"^P",["^D",["^Q"]],"~:shadow/js-access-global",["^D",["Error"]],"^R",null,"~:defs",["^ ","~$italics",["^ ","^E","^2C","^6","markdown/common.cljc","^7",152,"^8",1,"^9",152,"^:",13,"^5",["^ ","^6","markdown/common.cljc","^7",152,"^8",6,"^9",152,"^:",13],"~:tag","~$any"],"~$separator",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/common.cljc","^7",140,"^8",7,"^9",140,"^:",16,"~:arglists",["^U",["~$quote",["^U",[["~$escape?","~$text","~$open","~$close","^4L","~$state"]]]]]],"^E","^2G","^6","markdown/common.cljc","^:",16,"~:method-params",["^U",[["^4P","^4Q","^4R","^4S","^4L","^4T"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^8",1,"~:variadic?",false,"^7",140,"~:ret-tag","^4K","^9",140,"~:max-fixed-arity",6,"~:fn-var",true,"^4N",["^U",["^4O",["^U",[["^4P","^4Q","^4R","^4S","^4L","^4T"]]]]]],"~$make-heading",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",191,"^8",7,"^9",191,"^:",19,"^4N",["^U",["^4O",["^U",[["^4Q","~$heading-anchors"]]]]]],"^E","^2M","^6","markdown/common.cljc","^:",19,"^4U",["^U",[["^4Q","^51"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",191,"^4Y",["^D",["^M","~$clj-nil"]],"^9",191,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^51"]]]]]],"~$*substring*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",4,"^8",23,"^9",4,"^:",34,"~:dynamic",true],"^E","^2O","^6","markdown/common.cljc","^:",34,"^8",1,"^54",true,"^7",4,"^9",4,"^4J","^4K"],"~$dashes",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",202,"^8",7,"^9",202,"^:",13,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"^E","^25","^6","markdown/common.cljc","^:",13,"^4U",["^U",[["^4Q","^4T"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",202,"^4Y","~$cljs.core/IVector","^9",202,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"~$thaw-strings",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",36,"^8",7,"^9",36,"^:",19,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]],"~:doc","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"^E","^24","^6","markdown/common.cljc","^:",19,"^4U",["^U",[["^4Q","^4T"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",36,"^4Y","^56","^9",36,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]],"^58","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"~$escape-delimiter",["^ ","^E","^26","^6","markdown/common.cljc","^7",8,"^8",1,"^9",8,"^:",22,"^5",["^ ","^6","markdown/common.cljc","^7",8,"^8",6,"^9",8,"^:",22],"^4J","^M"],"~$inhibit",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",158,"^8",7,"^9",158,"^:",14,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"^E","^27","^6","markdown/common.cljc","^:",14,"^4U",["^U",[["^4Q","^4T"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",158,"^4Y",["^D",["^56","^4K"]],"^9",158,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"~$heading-text",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",172,"^8",7,"^9",172,"^:",19,"^4N",["^U",["^4O",["^U",[["^4Q"]]]]]],"^E","^2:","^6","markdown/common.cljc","^:",19,"^4U",["^U",[["^4Q"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",172,"^4Y","^M","^9",172,"^4Z",1,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q"]]]]]],"~$*inhibit-separator*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",6,"^8",16,"^9",6,"^:",35,"^54",true],"^E","^1M","^6","markdown/common.cljc","^:",35,"^8",1,"^54",true,"^7",6,"^9",6,"^4J","^4K"],"~$bold",["^ ","^E","^1N","^6","markdown/common.cljc","^7",148,"^8",1,"^9",148,"^:",10,"^5",["^ ","^6","markdown/common.cljc","^7",148,"^8",6,"^9",148,"^:",10],"^4J","^4K"],"~$freeze-string",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",13,"^8",7,"^9",13,"^:",20,"^4N",["^U",["^4O",["^U",[["~$&","~$args"]]]]],"^58","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.","~:top-fn",["^ ","^4X",true,"~:fixed-arity",0,"^4Z",0,"^4U",[["^U",["^5?"]]],"^4N",["^U",[["~$&","^5?"]]],"^4W",["^U",[null]]]],"^E","^1B","^6","markdown/common.cljc","^:",20,"^5@",["^ ","^4X",true,"^5A",0,"^4Z",0,"^4U",[["^U",["^5?"]]],"^4N",["^U",[["~$&","^5?"]]],"^4W",["^U",[null]]],"^4U",[["^U",["^5?"]]],"^4V",null,"^5A",0,"^4W",["^U",[null]],"^8",1,"^4X",true,"~:methods",[["^ ","^5A",0,"^4X",true,"^4J","^56"]],"^7",13,"^4Y","^4K","^9",13,"^4Z",0,"^4[",true,"^4N",["^U",[["~$&","^5?"]]],"^58","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later."],"~$hugo-anchor",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",179,"^8",7,"^9",179,"^:",18,"^4N",["^U",["^4O",["^U",[["^4Q"]]]]],"^58","Extract Hugo markdown anchor links from the `text`.\n\n  See: https://gohugo.io/content-management/cross-references/#heading-ids"],"^E","^1C","^6","markdown/common.cljc","^:",18,"^4U",["^U",[["^4Q"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",179,"^4Y",["^D",["^4K","^52"]],"^9",179,"^4Z",1,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q"]]]]],"^58","Extract Hugo markdown anchor links from the `text`.\n\n  See: https://gohugo.io/content-management/cross-references/#heading-ids"],"~$thaw-string",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",24,"^8",7,"^9",24,"^:",18,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]],"^58","Recursively replaces the frozen strings in the output with the original text."],"^E","^1G","^6","markdown/common.cljc","^:",18,"^4U",["^U",[["^4Q","^4T"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",24,"^4Y","^56","^9",24,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]],"^58","Recursively replaces the frozen strings in the output with the original text."],"~$make-separator",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",90,"^8",7,"^9",90,"^:",21,"^4N",["^U",["^4O",["^U",[["^4L","^4R","^4S"],["^4L","^4R","^4S","~$transformer"]]]]],"^58","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.","^5@",["^ ","^4X",false,"^5A",4,"^4Z",4,"^4U",[["^4L","^4R","^4S"],["^4L","^4R","^4S","^5F"]],"^4N",["^U",[["^4L","^4R","^4S"],["^4L","^4R","^4S","^5F"]]],"^4W",["^U",[null,null]]]],"^E","^28","^6","markdown/common.cljc","^:",21,"^5@",["^ ","^4X",false,"^5A",4,"^4Z",4,"^4U",[["^4L","^4R","^4S"],["^4L","^4R","^4S","^5F"]],"^4N",["^U",[["^4L","^4R","^4S"],["^4L","^4R","^4S","^5F"]]],"^4W",["^U",[null,null]]],"^4U",[["^4L","^4R","^4S"],["^4L","^4R","^4S","^5F"]],"^4V",null,"^5A",4,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^5B",[["^ ","^5A",3,"^4X",false,"^4J","^4K"],["^ ","^5A",4,"^4X",false,"^4J","~$function"]],"^7",90,"^9",90,"^4Z",4,"^4[",true,"^4N",["^U",[["^4L","^4R","^4S"],["^4L","^4R","^4S","^5F"]]],"^58","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk."],"~$escape-code",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",43,"^8",7,"^9",43,"^:",18,"^4N",["^U",["^4O",["^U",[["~$s"]]]]]],"^E","^1H","^6","markdown/common.cljc","^:",18,"^4U",["^U",[["~$s"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",43,"^4Y","^M","^9",43,"^4Z",1,"^4[",true,"^4N",["^U",["^4O",["^U",[["~$s"]]]]]],"~$gen-token",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",10,"^8",7,"^9",10,"^:",16,"^4N",["^U",["^4O",["^U",[["~$n"]]]]]],"^E","^2>","^6","markdown/common.cljc","^:",16,"^4U",["^U",[["~$n"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",10,"^4Y","^M","^9",10,"^4Z",1,"^4[",true,"^4N",["^U",["^4O",["^U",[["~$n"]]]]]],"~$strong",["^ ","^E","^2@","^6","markdown/common.cljc","^7",144,"^8",1,"^9",144,"^:",12,"^5",["^ ","^6","markdown/common.cljc","^7",144,"^8",6,"^9",144,"^:",12],"^4J","^4K"],"~$escape-code-transformer",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",135,"^8",7,"^9",135,"^:",30,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"^E","^1K","^6","markdown/common.cljc","^:",30,"^4U",["^U",[["^4Q","^4T"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",135,"^4Y","^56","^9",135,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"~$em",["^ ","^E","^1Y","^6","markdown/common.cljc","^7",150,"^8",1,"^9",150,"^:",8,"^5",["^ ","^6","markdown/common.cljc","^7",150,"^8",6,"^9",150,"^:",8],"^4J","^4K"],"~$heading-level",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",187,"^8",7,"^9",187,"^:",20,"^4N",["^U",["^4O",["^U",[["^4Q"]]]]]],"^E","^20","^6","markdown/common.cljc","^:",20,"^4U",["^U",[["^4Q"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",187,"^4Y",["^D",["~$number","^52"]],"^9",187,"^4Z",1,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q"]]]]]],"~$escaped-chars",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",59,"^8",7,"^9",59,"^:",20,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"^E","^1D","^6","markdown/common.cljc","^:",20,"^4U",["^U",[["^4Q","^4T"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",59,"^4Y","^56","^9",59,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"~$open-html-tags",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",81,"^8",7,"^9",81,"^:",21,"^4N",["^U",["^4O",["^U",[["~$open?","~$token-seq"]]]]]],"^E","^2H","^6","markdown/common.cljc","^:",21,"^4U",["^U",[["^5Q","^5R"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",81,"^4Y","~$boolean","^9",81,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^5Q","^5R"]]]]]],"~$inline-code",["^ ","^E","^2D","^6","markdown/common.cljc","^7",156,"^8",1,"^9",156,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",156,"^8",6,"^9",156,"^:",17],"^4J","^5G"],"~$strikethrough",["^ ","^E","^1[","^6","markdown/common.cljc","^7",154,"^8",1,"^9",154,"^:",19,"^5",["^ ","^6","markdown/common.cljc","^7",154,"^8",6,"^9",154,"^:",19],"^4J","^4K"],"~$bold-italic",["^ ","^E","^1?","^6","markdown/common.cljc","^7",146,"^8",1,"^9",146,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",146,"^8",6,"^9",146,"^:",17],"^4J","^4K"],"~$escape-inhibit-separator",["^ ","^4M",null,"^5",["^ ","^6","markdown/common.cljc","^7",164,"^8",7,"^9",164,"^:",31,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]],"^E","^1T","^6","markdown/common.cljc","^:",31,"^4U",["^U",[["^4Q","^4T"]]],"^4V",null,"^4W",["^U",[null,null]],"^8",1,"^4X",false,"^7",164,"^4Y","^56","^9",164,"^4Z",2,"^4[",true,"^4N",["^U",["^4O",["^U",[["^4Q","^4T"]]]]]]],"^S",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^D",["~:open","~:codeblock","~:closed","~:default","~:frozen-strings","~:found-token","~:in-tag?","~:code"]],"~:order",["^61","^64","^5Z","^5Y","^5[","^62","^63","^60"]],"^X",["^ ","^Q",["^D",[]]],"^Y",["^ "],"^Z",["^O","^N","^L"]],"^I","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2R",[["^68","~:static-fns"],true,["^68","~:shadow-tweaks"],null,["^68","~:source-map-inline"],null,["^68","~:elide-asserts"],false,["^68","~:optimize-constants"],null,["^68","^13"],null,["^68","~:external-config"],null,["^68","~:tooling-config"],null,["^68","~:emit-constants"],null,["^68","~:load-tests"],true,["^68","~:form-size-threshold"],null,["^68","~:global-goog-object&array"],null,["^68","~:data-readers"],null,["^68","~:infer-externs"],"~:auto",["^68","^15"],null,["~:js-options","~:js-provider"],"^Q",["~:mode"],"~:dev",["^68","~:fn-invoke-direct"],null,["^68","~:source-map"],"/dev/null"]]]