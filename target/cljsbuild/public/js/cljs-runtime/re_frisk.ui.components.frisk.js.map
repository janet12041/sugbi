{"version":3,"sources":["re_frisk/ui/components/frisk.cljs"],"mappings":"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","names":["p__73591","map__73592","cljs.core/--destructure-map","cljs.core.get","re-frisk.ui.components.frisk/ExpandButton","expanded?","path","emit-fn","G__73593","G__73594","re-frisk.ui.components.frisk/styles","re-frisk.ui.components.frisk/ExpandAllButton","data","re-frisk.ui.components.frisk/CollapseAllButton","re-frisk.ui.components.frisk/button","label","cljs.core/deref","p1__73595#","re-frisk.ui.components.frisk/FilterEditBox","inp-val","val","cljs.core/reset!","re-frisk.ui.components.frisk/FilterReset","p__73599","map__73600","re-frisk.ui.components.frisk/node-clicked","event","G__73601","G__73602","G__73603","re-frisk.ui.components.frisk/NilText","cljs.core.pr_str","re-frisk.ui.components.frisk/StringText","re-frisk.ui.components.frisk/KeywordText","re-frisk.ui.components.frisk/NumberText","re-frisk.ui.components.frisk/is-prefix","needle","haystack","cljs.core/count","cljs.core._EQ_","cljs.core.subvec","p__73627","map__73628","re-frisk.ui.components.frisk/Node","swappable","node","matching-paths","p1__73623#","cljs.core.merge","p1__73624#","e","G__73632","G__73633","G__73634","cljs.core/Keyword","cljs.core/name","G__73635","G__73636","G__73637","cljs.core.keyword","cljs.core/object?","G__73638","G__73639","G__73640","js/Number","re-frisk.ui.components.frisk/is-expanded","expanded-paths","expanded-matching-paths","or__5045__auto__","p__73645","map__73646","vec__73647","cljs.core.nth","re-frisk.ui.components.frisk/KeyValNode","k","v","re-frisk.ui.components.frisk/DataFrisk","cljs.core.conj","re-frisk.ui.components.frisk/copy","_","show-copied","re_frisk.inlined_deps.reagent.v1v0v0.reagent.core.atom","js/setTimeout","re-frisk.clipboard/copy-to-clip","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__73652","cljs.core/*print-newline*","*print-fn*-orig-val__73653","cljs.core/*print-fn*","*print-newline*-temp-val__73654","*print-fn*-temp-val__73655","x__5691__auto__","cljs.pprint.pprint","p__73658","map__73659","re-frisk.ui.components.frisk/MapNode","all","cljs.core/empty?","cljs.core/keys","cljs.core.map_indexed","i","x","cljs.core.assoc","p__73663","map__73664","re-frisk.ui.components.frisk/ListVecNode","cljs.core/vector?","p__73668","map__73669","re-frisk.ui.components.frisk/SetNode","p__73671","map__73672","cljs.core/map?","cljs.core/set?","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IDeref","re-frisk.ui.components.frisk/conj-to-set","coll","re-frisk.ui.components.frisk/expand-all-paths","root-value","remaining","cljs.core/seq","vec__73685","seq__73686","first__73687","cljs.core/first","cljs.core/next","current","rest","current-node","G__73688","cljs.core.concat","cljs.core.map","p__73690","vec__73691","cljs.core/coll?","re-frisk.ui.components.frisk/apply-filter","state","id","value","filter","re-frisk.filter.filter-parser/parse","cljs.core.println","cljs.core/assoc-in","re-frisk.ui.components.frisk/emit-fn-factory","state-atom","filter-refs","args","G__73696","js/Error","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/disj","p1__73694#","cljs.core/second","cljs.core.dissoc","re-frisk.utils/debounce","vec__73702","re-frisk.ui.components.frisk/emit-fn-factory-simple","G__73706","var_args","G__73708","re-frisk.ui.components.frisk/walk-paths","re_frisk.ui.components.frisk.walk_paths","prefix","cljs.core.apply","clojure.set/union","p__73709","vec__73710","re-frisk.ui.components.frisk/matching-paths","filter'","cljs.core/set","p1__73716#","cljs.core.filter","re-frisk.filter.filter-matcher/match","re-frisk.ui.components.frisk/prefixes","cljs.core.reductions","cljs.core/conj","re-frisk.ui.components.frisk/expanded-matching-paths","paths","re-frisk.ui.components.frisk/scroll-frisk-list-item","filter-ref","current-search-index","dec?","len","indx","matching","cljs.core/vec","cljs.core.sort_by","p1__73720#","cljs.core/PersistentHashMap","cljs.core/dec","cljs.core/inc","temp__5804__auto__","elem","re-frisk.ui.components.frisk/Root","cljs.core.atom","data-frisk","cljs.core/IAtom","cljs.core.get_in","expanded-matching","re-frisk.ui.components.components/scroller","re-frisk.ui.components.frisk/expand-by-default","p1__73733#","p2__73734#","cljs.core.reduce","cljs.core.range","re-frisk.ui.components.frisk/Root-Simple"],"sourcesContent":["(ns re-frisk.ui.components.frisk\n  (:require [clojure.set :as set]\n            [re-frisk.filter.filter-parser :as filter-parser]\n            [re-frisk.filter.filter-matcher :as filter-matcher]\n            [re-frisk.ui.components.components :as components]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.core :as reagent]\n            [re-frisk.clipboard :as clipboard]\n            cljs.pprint\n            [re-frisk.utils :as utils]))\n\n;;original idea Odin Hole Standal https://github.com/Odinodin/data-frisk-reagent\n(declare DataFrisk)\n\n(defn ExpandButton [{:keys [expanded? path emit-fn]}]\n  [:button {:style    {:border          0\n                       :backgroundColor \"transparent\" :width \"20px\" :height \"20px\"}\n            :on-click #(emit-fn (if expanded? :contract :expand) path)}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width   \"100%\" :height \"100%\"\n          :style   {:transition \"all 0.2s ease\"\n                    :transform  (when expanded? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"gray\" :color \"gray\"}]]])\n\n(def styles\n  {:shell                {:backgroundColor \"#FAFAFA\"\n                          :fontFamily      \"Consolas,Monaco,Courier New,monospace\"\n                          :fontSize        \"12px\"\n                          :z-index         9999}\n   :strings              {:color \"#4Ebb4E\"}\n   :keywords             {:color \"purple\"}\n   :numbers              {:color \"blue\"}\n   :nil                  {:color \"red\"}\n   :shell-visible-button {:backgroundColor \"#4EE24E\"}})\n\n(defn ExpandAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :expand-all data)}\n   \"exp\"])\n\n(defn CollapseAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :collapse-all)}\n   \"coll\"])\n\n(defn button [label emit-fn]\n  [:button {:on-click emit-fn\n            :style    {:paddingLeft             \"5px\"\n                       :paddingRight            \"5px\"\n                       :marginLeft              \"5px\"}}\n   label])\n\n(defn FilterEditBox [emit-fn inp-val]\n  [:input {:type        \"text\"\n           :value       @inp-val\n           :style       {:flex 1 :margin-left 5}\n           :placeholder \"Type here to find keys...\"\n           :on-change   #(let [val (.. % -target -value)]\n                           (reset! inp-val val)\n                           (emit-fn :filter-change val))}])\n\n(defn FilterReset [emit-fn inp-val]\n  [:button {:style    {:margin-right 5 :width 25}\n            :on-click #(do\n                         (reset! inp-val \"\")\n                         (emit-fn :filter-change \"\" 0))} \"X\"])\n\n(defn node-clicked [{:keys [event emit-fn path]}]\n  (.stopPropagation event)\n  (emit-fn :filter-change-exp (str path) 0))\n\n(defn NilText []\n  [:span {:style (:nil styles)} (pr-str nil)])\n\n(defn StringText [data]\n  [:span {:style (:strings styles)} (pr-str data)])\n\n(defn KeywordText [data]\n  [:span {:style (:keywords styles)} (str data)])\n\n(defn NumberText [data]\n  [:span {:style (:numbers styles)} data])\n\n(defn is-prefix [needle haystack]\n  (and (< (count needle) (count haystack))\n       (= needle (subvec haystack 0 (count needle)))))\n\n(defn Node [{:keys [data path emit-fn swappable node matching-paths]}]\n  [:span {:style {:padding-top \"5px\"}}\n   (when node\n     [:span {:style {:padding-left \"20px\"}}\n      [Node node]])\n   [:span\n    (merge\n     {:on-click #(node-clicked {:event % :emit-fn emit-fn :path path})\n      :style    (merge (when node {:padding-left \"10px\"})\n                       (when (get matching-paths path)\n                         {:background-color \"#fff9db\"}))}\n     (when (get matching-paths path)\n       {:id  (str path)\n        :ref #(emit-fn :filter-ref path %)}))\n    (cond\n      (nil? data)\n      [NilText]\n\n      (string? data)\n      (if swappable\n        [:input {:type          \"text\"\n                 :default-value (str data)\n                 :on-change     (fn string-changed [e] (emit-fn :changed path (.. e -target -value)))}]\n        [StringText data])\n\n      (keyword? data)\n      (if swappable\n        [:input {:type          \"text\"\n                 :default-value (name data)\n                 :on-change     (fn keyword-changed [e] (emit-fn :changed path (keyword (.. e -target -value))))}]\n        [KeywordText data])\n\n      (object? data)\n      \"Object\"\n\n      (number? data)\n      (if swappable\n        [:input {:type          \"number\"\n                 :default-value data\n                 :on-change     (fn number-changed [e] (emit-fn :changed path (js/Number (.. e -target -value))))}]\n        [NumberText data])\n      :else\n      (str data))]])\n\n;; A path is expanded if it is explicitly expanded or if it is a part of\n;; current selection\n(defn is-expanded [expanded-paths expanded-matching-paths path]\n  (or (get expanded-paths path)\n      (get expanded-matching-paths path)))\n\n(defn KeyValNode [{[k v] :data :keys [path expanded-paths matching-paths expanded-matching-paths emit-fn swappable]}]\n  [:div {:style {:display \"flex\"}}\n   [DataFrisk {:node                    {:data           k\n                                         :emit-fn        emit-fn\n                                         :path           (conj path k)\n                                         :matching-paths matching-paths}\n               :data                    v\n               :swappable               swappable\n               :path                    (conj path k)\n               :expanded-paths          expanded-paths\n               :matching-paths          matching-paths\n               :expanded-matching-paths expanded-matching-paths\n               :emit-fn                 emit-fn}]])\n\n(defn copy [_]\n  (let [ show-copied (reagent/atom nil)]\n    (fn [data]\n      [:span {:on-click (fn []\n                          (reset! show-copied true)\n                          (js/setTimeout #(reset! show-copied false) 2000)\n                          (clipboard/copy-to-clip (with-out-str (cljs.pprint/pprint data))))\n              :style {:cursor :pointer}}\n       \" \u2398\"\n       (when @show-copied\n         [:span {:style {:background-color :white :border-radius 4 :margin-left 5}} \"copied\"])])))\n\n(defn MapNode [{:keys [data path expanded-paths expanded-matching-paths emit-fn node] :as all}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path      path\n                       :emit-fn   emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" {\"]\n      [:span (str (count (keys data)) \" keys\")]\n      [:span \"}\"]\n      [copy data]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i}\n                       [:div {:style {:flex 1}}\n                        [KeyValNode (assoc all :data x)]])\n                     data))]]))\n\n(defn ListVecNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path      path\n                       :emit-fn   emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span (if (vector? data) \" [\" \" (\")\n       (str (count data) \" items\")]\n      [:span (if (vector? data) \"]\" \")\")]\n      [copy data]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data                    x\n                                                      :swappable               swappable\n                                                      :path                    (conj path i)\n                                                      :expanded-paths          expanded-paths\n                                                      :matching-paths          matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn                 emit-fn}]]) data))]]))\n\n(defn SetNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path      path\n                       :emit-fn   emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" #{\"\n       (str (count data) \" items\")]\n      [:span \"}\"]\n      [copy data]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data                    x\n                                                      :swappable               swappable\n                                                      :path                    (conj path x)\n                                                      :expanded-paths          expanded-paths\n                                                      :matching-paths          matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn                 emit-fn}]]) data))]]))\n\n(defn DataFrisk [{:keys [data] :as all}]\n  (cond (map? data) [MapNode all]\n        (set? data) [SetNode all]\n        (or (seq? data) (vector? data)) [ListVecNode all]\n        (satisfies? IDeref data) [DataFrisk (assoc all :data @data)]\n        :else [Node all]))\n\n(defn conj-to-set [coll x]\n  (conj (or coll #{}) x))\n\n(defn expand-all-paths [root-value]\n  (loop [remaining [{:path [] :node root-value}]\n         expanded-paths #{}]\n    (if (seq remaining)\n      (let [[current & rest] remaining\n            current-node (if (satisfies? IDeref (:node current)) @(:node current) (:node current))]\n        (cond (map? current-node)\n              (recur\n               (concat rest (map (fn [[k v]] {:path (conj (:path current) k)\n                                              :node v})\n                                 current-node))\n               (conj expanded-paths (:path current)))\n              (or (seq? current-node) (vector? current-node))\n              (recur\n               (concat rest (map-indexed (fn [i node] {:path (conj (:path current) i)\n                                                       :node node})\n                                         current-node))\n               (conj expanded-paths (:path current)))\n              :else\n              (recur\n               rest\n               (if (coll? current-node)\n                 (conj expanded-paths (:path current))\n                 expanded-paths))))\n      expanded-paths)))\n\n(defn apply-filter [state id value]\n  (let [filter (filter-parser/parse value)]\n    (println \"FILTER\" filter)\n    (-> state\n        (assoc-in [:data-frisk id :filter] filter)\n        (assoc-in [:data-frisk id :filter-string] value))))\n\n(defn emit-fn-factory [state-atom id swappable filter-refs inp-val]\n  (fn [event & args]\n    (case event\n      :expand (swap! state-atom update-in [:data-frisk id :expanded-paths] conj-to-set (first args))\n      :expand-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] (expand-all-paths (first args)))\n      :contract (swap! state-atom update-in [:data-frisk id :expanded-paths] disj (first args))\n      :collapse-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] #{})\n      :filter-ref (swap! filter-refs #(if (second args)\n                                        (assoc % (first args) (second args))\n                                        (dissoc % (first args))))\n      :filter-change-exp\n      (do\n        (reset! inp-val (first args))\n        (swap! state-atom apply-filter id (first args)))\n      :filter-change\n      (do\n        (reset! inp-val (first args))\n        (utils/debounce :filter-change 400 #(swap! state-atom apply-filter id (first args))))\n      :changed (let [[path value] args]\n                 (if (seq path)\n                   (swap! swappable assoc-in path value)\n                   (reset! swappable value))))))\n\n(defn emit-fn-factory-simple [state-atom id]\n  (fn [event & args]\n    (case event\n      :expand (swap! state-atom update-in [:data-frisk id :expanded-paths] conj-to-set (first args))\n      :contract (swap! state-atom update-in [:data-frisk id :expanded-paths] disj (first args))\n      nil)))\n\n(defn walk-paths\n  ([data]\n   (walk-paths [] data))\n  ([prefix data]\n   (conj\n    (cond (map? data)\n          (apply set/union\n                 (map (fn [[k v]] (walk-paths (conj prefix k) v)) data))\n          (set? data)\n          (apply set/union\n                 (map (fn [v] (walk-paths (conj prefix v) v)) data))\n          (or (seq? data) (vector? data))\n          (apply set/union\n                 (map-indexed\n                  (fn [i v] (walk-paths (conj prefix i) v)) data))\n          (satisfies? IDeref data) (walk-paths prefix @data)\n          :else #{})\n    prefix)))\n\n(defn matching-paths [data filter']\n  (set (filter #(filter-matcher/match filter' %) (walk-paths data))))\n\n(defn prefixes [path]\n  (set (reductions conj [] path)))\n\n;; Any node which is a prefix of a matched path needs to be expnaded\n(defn expanded-matching-paths [paths]\n  (apply set/union (map prefixes paths)))\n\n(defn scroll-frisk-list-item [filter-ref current-search-index dec?]\n  (let [filter-ref @filter-ref\n        len (count filter-ref)\n        indx @current-search-index]\n    (when (> len 0)\n      (let [matching (vec (sort-by :y (map #(hash-map\n                                             :path (first %)\n                                             :y (.-top (.getBoundingClientRect (second %)))\n                                             :el (second %))\n                                           filter-ref)))]\n        (if dec?\n          (if (or (zero? indx)\n                  (>= (dec indx) len))\n            (reset! current-search-index (dec len))\n            (swap! current-search-index dec))\n          (if (>= (inc indx) len)\n            (reset! current-search-index 0)\n            (swap! current-search-index inc)))\n        (when-let [path (get matching indx)]\n          (when-let [elem (:el path)]\n            (.scrollIntoView elem #js {:block \"center\"})))))))\n\n(defn Root [_ _ _]\n  (let [filter-refs (atom {})\n        current-search-index (atom 0)\n        inp-val (reagent/atom \"\")]\n    (fn [data id state-atom]\n      (let [data-frisk (:data-frisk @state-atom)\n            swappable (when (satisfies? IAtom data)\n                        data)\n            filter (or (get-in data-frisk [id :filter]) [])\n            matching (matching-paths data filter)\n            expanded-matching (expanded-matching-paths matching)\n            emit-fn (emit-fn-factory state-atom id swappable filter-refs inp-val)]\n        [:div {:style {:background-color \"#f3f3f3\" :color \"#444444\" :flex 1 :display :flex :flex-direction :column}}\n         [:div {:style {:padding \"4px 2px\" :display :flex}}\n          [ExpandAllButton emit-fn data]\n          [CollapseAllButton emit-fn]\n          [:div {:style {:padding \"2px\" :margin-left \"4px\" :background-color \"#fff9db\"}} (count matching)]\n          [button \"\u2191\" #(scroll-frisk-list-item filter-refs current-search-index true)]\n          [button \"\u2193\" #(scroll-frisk-list-item filter-refs current-search-index false)]\n          [FilterEditBox emit-fn inp-val]\n          [FilterReset emit-fn inp-val]]\n         [components/scroller\n          [DataFrisk {:data                    data\n                      :swappable               swappable\n                      :path                    []\n                      :expanded-paths          (get-in data-frisk [id :expanded-paths])\n                      :matching-paths          matching\n                      :expanded-matching-paths expanded-matching\n                      :emit-fn                 emit-fn}]]]))))\n\n(def expand-by-default (reduce #(assoc-in %1 [:data-frisk %2 :expanded-paths] #{[]}) {} (range 1)))\n\n(defn Root-Simple [_ _ _]\n  (let [state-atom (reagent/atom expand-by-default)]\n    (fn [data]\n      [DataFrisk {:data                    data\n                  :path                    []\n                  :expanded-paths          (get-in @state-atom [:data-frisk 0 :expanded-paths])\n                  :emit-fn                 (emit-fn-factory-simple state-atom 0)}])))"]}